// @lang=sva @ts=8

module property_checker
  (
  input clock,
  input reset
  );

  default clocking default_clk @(posedge clock); endclocking

  `include "tidal.sv"

`begin_tda(ops)

  localparam MAX_LATENCY = 10;

  enum {S_READY, S_NEG_INPUTS, S_MUL, S_DIV, S_DUMMY, S_NEG_OUTPUT, S_DONE_MUL, S_DONE_DIV} state_t;

  function automatic State_Equivalence();
  State_Equivalence = (
    (U1.inPipe_bits_in1       == U2.inPipe_bits_in1      ) &&
    (U1.inPipe_bits_rm        == U2.inPipe_bits_rm       ) &&
    (U1.inPipe_bits_typ       == U2.inPipe_bits_typ      ) &&
    (U1.inPipe_bits_typeTagIn == U2.inPipe_bits_typeTagIn) &&
    (U1.inPipe_bits_wflags    == U2.inPipe_bits_wflags   ) &&
    (U1.inPipe_valid          == U2.inPipe_valid         ) &&
    (U1.io_out_b_data         == U2.io_out_b_data        ) &&
    (U1.io_out_b_exc          == U2.io_out_b_exc         ) &&
    (U1.io_out_v              == U2.io_out_v             )
  );
  endfunction

  function automatic No_Control_Discrepancy();
  No_Control_Discrepancy = (
//  (U1.io_out_bits_exc == U2.io_out_bits_exc) &&
    (U1.io_out_valid    == U2.io_out_valid   )
  );
  endfunction

  function automatic Control_Equivalence();
  Control_Equivalence = (
    (U1.inPipe_bits_rm        == U2.inPipe_bits_rm       ) &&
    (U1.inPipe_bits_typ       == U2.inPipe_bits_typ      ) &&
    (U1.inPipe_bits_typeTagIn == U2.inPipe_bits_typeTagIn) &&
    (U1.inPipe_bits_wflags    == U2.inPipe_bits_wflags   ) &&
    (U1.inPipe_valid          == U2.inPipe_valid         ) &&
    (U1.io_out_v              == U2.io_out_v             )
  );
  endfunction

  // ---------------------------------
  // - Basic Functional Verification -
  // ---------------------------------

  sequence reset_sequence;
    (reset == 1'b1);
  endsequence

  property reset_p;
    reset_sequence
    |=>
    t ##0 (U1.inPipe_valid == 1'b0) and
    t ##0 (U2.inPipe_valid == 1'b0);
  endproperty
  reset_p_a: assert property (reset_p);

  // ------------------------------------
  // - UPEC for Data-Independent Timing -
  // ------------------------------------

  property dit_in1_valid_p();
    t ##0 State_Equivalence()
    implies
    during_o(t, 1, t, MAX_LATENCY, No_Control_Discrepancy());
  endproperty
  dit_in1_valid_p_a: assert property (disable iff (reset) dit_in1_valid_p());


  property noninterference_p();
    t ##0 Control_Equivalence()
    implies
    t ##1 Control_Equivalence();
  endproperty
  noninterference_p_a: assert property (disable iff (reset) noninterference_p());

`end_tda

endmodule

bind IntToFP_Miter property_checker checker_bind(.clock(clock), .reset(reset));
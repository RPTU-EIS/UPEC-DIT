; SMT-LIBv2 description generated by Yosys 0.19+34 (git sha1 d19f9d0b6, clang 14.0.0-1ubuntu1 -fPIC -Os)
; yosys-smt2-module sha512
(declare-sort |sha512_s| 0)
(declare-fun |sha512_is| (|sha512_s|) Bool)
(declare-fun |sha512#0| (|sha512_s|) (_ BitVec 64)) ; \A
; yosys-smt2-register A 64
; yosys-smt2-wire A 64
(define-fun |sha512_n A| ((state |sha512_s|)) (_ BitVec 64) (|sha512#0| state))
(declare-fun |sha512#1| (|sha512_s|) (_ BitVec 64)) ; \B
; yosys-smt2-register B 64
; yosys-smt2-wire B 64
(define-fun |sha512_n B| ((state |sha512_s|)) (_ BitVec 64) (|sha512#1| state))
(declare-fun |sha512#2| (|sha512_s|) (_ BitVec 64)) ; \C
; yosys-smt2-register C 64
; yosys-smt2-wire C 64
(define-fun |sha512_n C| ((state |sha512_s|)) (_ BitVec 64) (|sha512#2| state))
(declare-fun |sha512#3| (|sha512_s|) (_ BitVec 64)) ; \D
; yosys-smt2-register D 64
; yosys-smt2-wire D 64
(define-fun |sha512_n D| ((state |sha512_s|)) (_ BitVec 64) (|sha512#3| state))
(declare-fun |sha512#4| (|sha512_s|) (_ BitVec 64)) ; \E
; yosys-smt2-register E 64
; yosys-smt2-wire E 64
(define-fun |sha512_n E| ((state |sha512_s|)) (_ BitVec 64) (|sha512#4| state))
(declare-fun |sha512#5| (|sha512_s|) (_ BitVec 64)) ; \F
; yosys-smt2-register F 64
; yosys-smt2-wire F 64
(define-fun |sha512_n F| ((state |sha512_s|)) (_ BitVec 64) (|sha512#5| state))
(declare-fun |sha512#6| (|sha512_s|) (_ BitVec 64)) ; \G
; yosys-smt2-register G 64
; yosys-smt2-wire G 64
(define-fun |sha512_n G| ((state |sha512_s|)) (_ BitVec 64) (|sha512#6| state))
(declare-fun |sha512#7| (|sha512_s|) (_ BitVec 64)) ; \H
; yosys-smt2-register H 64
; yosys-smt2-wire H 64
(define-fun |sha512_n H| ((state |sha512_s|)) (_ BitVec 64) (|sha512#7| state))
(declare-fun |sha512#8| (|sha512_s|) (_ BitVec 64)) ; \H0
; yosys-smt2-register H0 64
; yosys-smt2-wire H0 64
(define-fun |sha512_n H0| ((state |sha512_s|)) (_ BitVec 64) (|sha512#8| state))
(declare-fun |sha512#9| (|sha512_s|) (_ BitVec 64)) ; \H1
; yosys-smt2-register H1 64
; yosys-smt2-wire H1 64
(define-fun |sha512_n H1| ((state |sha512_s|)) (_ BitVec 64) (|sha512#9| state))
(declare-fun |sha512#10| (|sha512_s|) (_ BitVec 64)) ; \H2
; yosys-smt2-register H2 64
; yosys-smt2-wire H2 64
(define-fun |sha512_n H2| ((state |sha512_s|)) (_ BitVec 64) (|sha512#10| state))
(declare-fun |sha512#11| (|sha512_s|) (_ BitVec 64)) ; \H3
; yosys-smt2-register H3 64
; yosys-smt2-wire H3 64
(define-fun |sha512_n H3| ((state |sha512_s|)) (_ BitVec 64) (|sha512#11| state))
(declare-fun |sha512#12| (|sha512_s|) (_ BitVec 64)) ; \H4
; yosys-smt2-register H4 64
; yosys-smt2-wire H4 64
(define-fun |sha512_n H4| ((state |sha512_s|)) (_ BitVec 64) (|sha512#12| state))
(declare-fun |sha512#13| (|sha512_s|) (_ BitVec 64)) ; \H5
; yosys-smt2-register H5 64
; yosys-smt2-wire H5 64
(define-fun |sha512_n H5| ((state |sha512_s|)) (_ BitVec 64) (|sha512#13| state))
(declare-fun |sha512#14| (|sha512_s|) (_ BitVec 64)) ; \H6
; yosys-smt2-register H6 64
; yosys-smt2-wire H6 64
(define-fun |sha512_n H6| ((state |sha512_s|)) (_ BitVec 64) (|sha512#14| state))
(declare-fun |sha512#15| (|sha512_s|) (_ BitVec 64)) ; \H7
; yosys-smt2-register H7 64
; yosys-smt2-wire H7 64
(define-fun |sha512_n H7| ((state |sha512_s|)) (_ BitVec 64) (|sha512#15| state))
(declare-fun |sha512#16| (|sha512_s|) (_ BitVec 64)) ; \Kt
; yosys-smt2-register Kt 64
; yosys-smt2-wire Kt 64
(define-fun |sha512_n Kt| ((state |sha512_s|)) (_ BitVec 64) (|sha512#16| state))
; yosys-smt2-wire SHA384_result 384
(define-fun |sha512_n SHA384_result| ((state |sha512_s|)) (_ BitVec 384) (concat (|sha512#0| state) (concat (|sha512#1| state) (concat (|sha512#2| state) (concat (|sha512#3| state) (concat (|sha512#4| state) (|sha512#5| state)))))))
; yosys-smt2-wire SHA512_result 512
(define-fun |sha512_n SHA512_result| ((state |sha512_s|)) (_ BitVec 512) (concat (|sha512#0| state) (concat (|sha512#1| state) (concat (|sha512#2| state) (concat (|sha512#3| state) (concat (|sha512#4| state) (concat (|sha512#5| state) (concat (|sha512#6| state) (|sha512#7| state)))))))))
(define-fun |sha512#17| ((state |sha512_s|)) (_ BitVec 64) (bvxor (concat ((_ extract 13 0) (|sha512#4| state)) ((_ extract 63 14) (|sha512#4| state))) (concat ((_ extract 17 0) (|sha512#4| state)) ((_ extract 63 18) (|sha512#4| state))))) ; $xor$sha512.v:232$46_Y
(define-fun |sha512#18| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#17| state) (concat ((_ extract 40 0) (|sha512#4| state)) ((_ extract 63 41) (|sha512#4| state))))) ; \f4_E_64
(define-fun |sha512#19| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#7| state) (|sha512#18| state))) ; $add$sha512.v:242$55_Y
(define-fun |sha512#20| ((state |sha512_s|)) (_ BitVec 64) (bvand (|sha512#4| state) (|sha512#5| state))) ; $and$sha512.v:226$35_Y
(define-fun |sha512#21| ((state |sha512_s|)) (_ BitVec 64) (bvnot (|sha512#4| state))) ; $not$sha512.v:226$36_Y
(define-fun |sha512#22| ((state |sha512_s|)) (_ BitVec 64) (bvand (|sha512#21| state) (|sha512#6| state))) ; $and$sha512.v:226$37_Y
(define-fun |sha512#23| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#20| state) (|sha512#22| state))) ; \f1_EFG_64
(define-fun |sha512#24| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#19| state) (|sha512#23| state))) ; $add$sha512.v:242$56_Y
(define-fun |sha512#25| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#24| state) (|sha512#16| state))) ; $add$sha512.v:242$57_Y
(declare-fun |sha512#26| (|sha512_s|) (_ BitVec 32)) ; \Wt [63:32]
(declare-fun |sha512#27| (|sha512_s|) (_ BitVec 32)) ; \Wt [31:0]
(define-fun |sha512#28| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#25| state) (concat (|sha512#27| state) (|sha512#26| state)))) ; \T1_64
; yosys-smt2-wire T1_64 64
(define-fun |sha512_n T1_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#28| state))
(define-fun |sha512#29| ((state |sha512_s|)) (_ BitVec 64) (bvxor (concat ((_ extract 27 0) (|sha512#0| state)) ((_ extract 63 28) (|sha512#0| state))) (concat ((_ extract 33 0) (|sha512#0| state)) ((_ extract 63 34) (|sha512#0| state))))) ; $xor$sha512.v:230$44_Y
(define-fun |sha512#30| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#29| state) (concat ((_ extract 38 0) (|sha512#0| state)) ((_ extract 63 39) (|sha512#0| state))))) ; \f3_A_64
(define-fun |sha512#31| ((state |sha512_s|)) (_ BitVec 64) (bvand (|sha512#0| state) (|sha512#1| state))) ; $and$sha512.v:228$39_Y
(define-fun |sha512#32| ((state |sha512_s|)) (_ BitVec 64) (bvand (|sha512#1| state) (|sha512#2| state))) ; $and$sha512.v:228$40_Y
(define-fun |sha512#33| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#31| state) (|sha512#32| state))) ; $xor$sha512.v:228$41_Y
(define-fun |sha512#34| ((state |sha512_s|)) (_ BitVec 64) (bvand (|sha512#0| state) (|sha512#2| state))) ; $and$sha512.v:228$42_Y
(define-fun |sha512#35| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#33| state) (|sha512#34| state))) ; \f2_ABC_64
(define-fun |sha512#36| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#30| state) (|sha512#35| state))) ; \T2_64
; yosys-smt2-wire T2_64 64
(define-fun |sha512_n T2_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#36| state))
(declare-fun |sha512#37| (|sha512_s|) (_ BitVec 32)) ; \W0 [31:0]
(declare-fun |sha512#38| (|sha512_s|) (_ BitVec 32)) ; \W0 [63:32]
; yosys-smt2-register W0 64
; yosys-smt2-wire W0 64
(define-fun |sha512_n W0| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#38| state) (|sha512#37| state)))
(declare-fun |sha512#39| (|sha512_s|) (_ BitVec 32)) ; \W1 [31:0]
(declare-fun |sha512#40| (|sha512_s|) (_ BitVec 32)) ; \W1 [63:32]
; yosys-smt2-register W1 64
; yosys-smt2-wire W1 64
(define-fun |sha512_n W1| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#40| state) (|sha512#39| state)))
(declare-fun |sha512#41| (|sha512_s|) (_ BitVec 32)) ; \W10 [31:0]
(declare-fun |sha512#42| (|sha512_s|) (_ BitVec 32)) ; \W10 [63:32]
; yosys-smt2-register W10 64
; yosys-smt2-wire W10 64
(define-fun |sha512_n W10| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#42| state) (|sha512#41| state)))
(declare-fun |sha512#43| (|sha512_s|) (_ BitVec 32)) ; \W11 [31:0]
(declare-fun |sha512#44| (|sha512_s|) (_ BitVec 32)) ; \W11 [63:32]
; yosys-smt2-register W11 64
; yosys-smt2-wire W11 64
(define-fun |sha512_n W11| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#44| state) (|sha512#43| state)))
(declare-fun |sha512#45| (|sha512_s|) (_ BitVec 32)) ; \W12 [31:0]
(declare-fun |sha512#46| (|sha512_s|) (_ BitVec 32)) ; \W12 [63:32]
; yosys-smt2-register W12 64
; yosys-smt2-wire W12 64
(define-fun |sha512_n W12| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#46| state) (|sha512#45| state)))
(declare-fun |sha512#47| (|sha512_s|) (_ BitVec 32)) ; \W13 [31:0]
(declare-fun |sha512#48| (|sha512_s|) (_ BitVec 32)) ; \W13 [63:32]
; yosys-smt2-register W13 64
; yosys-smt2-wire W13 64
(define-fun |sha512_n W13| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#48| state) (|sha512#47| state)))
(declare-fun |sha512#49| (|sha512_s|) (_ BitVec 32)) ; \W14 [31:0]
(declare-fun |sha512#50| (|sha512_s|) (_ BitVec 32)) ; \W14 [63:32]
; yosys-smt2-register W14 64
; yosys-smt2-wire W14 64
(define-fun |sha512_n W14| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#50| state) (|sha512#49| state)))
; yosys-smt2-wire W14_swap 64
(define-fun |sha512_n W14_swap| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#49| state) (|sha512#50| state)))
; yosys-smt2-wire W1_swap 64
(define-fun |sha512_n W1_swap| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#39| state) (|sha512#40| state)))
(declare-fun |sha512#51| (|sha512_s|) (_ BitVec 32)) ; \W2 [31:0]
(declare-fun |sha512#52| (|sha512_s|) (_ BitVec 32)) ; \W2 [63:32]
; yosys-smt2-register W2 64
; yosys-smt2-wire W2 64
(define-fun |sha512_n W2| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#52| state) (|sha512#51| state)))
(declare-fun |sha512#53| (|sha512_s|) (_ BitVec 32)) ; \W3 [31:0]
(declare-fun |sha512#54| (|sha512_s|) (_ BitVec 32)) ; \W3 [63:32]
; yosys-smt2-register W3 64
; yosys-smt2-wire W3 64
(define-fun |sha512_n W3| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#54| state) (|sha512#53| state)))
(declare-fun |sha512#55| (|sha512_s|) (_ BitVec 32)) ; \W4 [31:0]
(declare-fun |sha512#56| (|sha512_s|) (_ BitVec 32)) ; \W4 [63:32]
; yosys-smt2-register W4 64
; yosys-smt2-wire W4 64
(define-fun |sha512_n W4| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#56| state) (|sha512#55| state)))
(declare-fun |sha512#57| (|sha512_s|) (_ BitVec 32)) ; \W5 [31:0]
(declare-fun |sha512#58| (|sha512_s|) (_ BitVec 32)) ; \W5 [63:32]
; yosys-smt2-register W5 64
; yosys-smt2-wire W5 64
(define-fun |sha512_n W5| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#58| state) (|sha512#57| state)))
(declare-fun |sha512#59| (|sha512_s|) (_ BitVec 32)) ; \W6 [31:0]
(declare-fun |sha512#60| (|sha512_s|) (_ BitVec 32)) ; \W6 [63:32]
; yosys-smt2-register W6 64
; yosys-smt2-wire W6 64
(define-fun |sha512_n W6| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#60| state) (|sha512#59| state)))
(declare-fun |sha512#61| (|sha512_s|) (_ BitVec 32)) ; \W7 [31:0]
(declare-fun |sha512#62| (|sha512_s|) (_ BitVec 32)) ; \W7 [63:32]
; yosys-smt2-register W7 64
; yosys-smt2-wire W7 64
(define-fun |sha512_n W7| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#62| state) (|sha512#61| state)))
(declare-fun |sha512#63| (|sha512_s|) (_ BitVec 32)) ; \W8 [31:0]
(declare-fun |sha512#64| (|sha512_s|) (_ BitVec 32)) ; \W8 [63:32]
; yosys-smt2-register W8 64
; yosys-smt2-wire W8 64
(define-fun |sha512_n W8| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#64| state) (|sha512#63| state)))
(declare-fun |sha512#65| (|sha512_s|) (_ BitVec 32)) ; \W9 [31:0]
(declare-fun |sha512#66| (|sha512_s|) (_ BitVec 32)) ; \W9 [63:32]
; yosys-smt2-register W9 64
; yosys-smt2-wire W9 64
(define-fun |sha512_n W9| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#66| state) (|sha512#65| state)))
; yosys-smt2-register Wt 64
; yosys-smt2-wire Wt 64
(define-fun |sha512_n Wt| ((state |sha512_s|)) (_ BitVec 64) (concat (|sha512#26| state) (|sha512#27| state)))
(define-fun |sha512#67| ((state |sha512_s|)) (_ BitVec 64) (bvxor (concat ((_ extract 18 0) (|sha512#50| state)) (concat (|sha512#49| state) ((_ extract 31 19) (|sha512#50| state)))) (concat ((_ extract 28 0) (|sha512#49| state)) (concat (|sha512#50| state) ((_ extract 31 29) (|sha512#49| state)))))) ; $xor$sha512.v:238$50_Y
(define-fun |sha512#68| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#67| state) (concat #b000000 (concat (|sha512#49| state) ((_ extract 31 6) (|sha512#50| state)))))) ; \f6_W14_64
(define-fun |sha512#69| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#68| state) (concat (|sha512#65| state) (|sha512#66| state)))) ; $add$sha512.v:240$52_Y
(define-fun |sha512#70| ((state |sha512_s|)) (_ BitVec 64) (bvxor (concat ((_ extract 0 0) (|sha512#40| state)) (concat (|sha512#39| state) ((_ extract 31 1) (|sha512#40| state)))) (concat ((_ extract 7 0) (|sha512#40| state)) (concat (|sha512#39| state) ((_ extract 31 8) (|sha512#40| state)))))) ; $xor$sha512.v:235$48_Y
(define-fun |sha512#71| ((state |sha512_s|)) (_ BitVec 64) (bvxor (|sha512#70| state) (concat #b0000000 (concat (|sha512#39| state) ((_ extract 31 7) (|sha512#40| state)))))) ; \f5_W1_64
(define-fun |sha512#72| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#69| state) (|sha512#71| state))) ; $add$sha512.v:240$53_Y
(define-fun |sha512#73| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#72| state) (concat (|sha512#37| state) (|sha512#38| state)))) ; \Wt_64_swap
; yosys-smt2-wire Wt_64_swap 64
(define-fun |sha512_n Wt_64_swap| ((state |sha512_s|)) (_ BitVec 64) (|sha512#73| state))
(declare-fun |sha512#74| (|sha512_s|) (_ BitVec 1)) ; \busy
; yosys-smt2-register busy 1
; yosys-smt2-wire busy 1
(define-fun |sha512_n busy| ((state |sha512_s|)) Bool (= ((_ extract 0 0) (|sha512#74| state)) #b1))
; yosys-smt2-output busy_o 1
; yosys-smt2-wire busy_o 1
(define-fun |sha512_n busy_o| ((state |sha512_s|)) Bool (= ((_ extract 0 0) (|sha512#74| state)) #b1))
(declare-fun |sha512#75| (|sha512_s|) Bool) ; \clk_i
; yosys-smt2-input clk_i 1
; yosys-smt2-wire clk_i 1
; yosys-smt2-clock clk_i posedge
(define-fun |sha512_n clk_i| ((state |sha512_s|)) Bool (|sha512#75| state))
(declare-fun |sha512#76| (|sha512_s|) (_ BitVec 2)) ; \cmd [1:0]
(declare-fun |sha512#77| (|sha512_s|) (_ BitVec 2)) ; \cmd [3:2]
(declare-fun |sha512#78| (|sha512_s|) (_ BitVec 1)) ; \cmd [4]
; yosys-smt2-register cmd 5
; yosys-smt2-wire cmd 5
(define-fun |sha512_n cmd| ((state |sha512_s|)) (_ BitVec 5) (concat (|sha512#78| state) (concat (|sha512#77| state) (|sha512#76| state))))
(declare-fun |sha512#79| (|sha512_s|) (_ BitVec 4)) ; \cmd_i
; yosys-smt2-input cmd_i 4
; yosys-smt2-wire cmd_i 4
(define-fun |sha512_n cmd_i| ((state |sha512_s|)) (_ BitVec 4) (|sha512#79| state))
; yosys-smt2-output cmd_o 5
; yosys-smt2-wire cmd_o 5
(define-fun |sha512_n cmd_o| ((state |sha512_s|)) (_ BitVec 5) (concat (|sha512#78| state) (concat (|sha512#77| state) (|sha512#76| state))))
(declare-fun |sha512#80| (|sha512_s|) Bool) ; \cmd_w_i
; yosys-smt2-input cmd_w_i 1
; yosys-smt2-wire cmd_w_i 1
(define-fun |sha512_n cmd_w_i| ((state |sha512_s|)) Bool (|sha512#80| state))
; yosys-smt2-wire f1_EFG_64 64
(define-fun |sha512_n f1_EFG_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#23| state))
; yosys-smt2-wire f2_ABC_64 64
(define-fun |sha512_n f2_ABC_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#35| state))
; yosys-smt2-wire f3_A_64 64
(define-fun |sha512_n f3_A_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#30| state))
; yosys-smt2-wire f4_E_64 64
(define-fun |sha512_n f4_E_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#18| state))
; yosys-smt2-wire f5_W1_64 64
(define-fun |sha512_n f5_W1_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#71| state))
; yosys-smt2-wire f6_W14_64 64
(define-fun |sha512_n f6_W14_64| ((state |sha512_s|)) (_ BitVec 64) (|sha512#68| state))
(define-fun |sha512#81| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#28| state) (|sha512#36| state))) ; \next_A
; yosys-smt2-wire next_A 64
(define-fun |sha512_n next_A| ((state |sha512_s|)) (_ BitVec 64) (|sha512#81| state))
(define-fun |sha512#82| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#3| state) (|sha512#28| state))) ; \next_E
; yosys-smt2-wire next_E 64
(define-fun |sha512_n next_E| ((state |sha512_s|)) (_ BitVec 64) (|sha512#82| state))
; yosys-smt2-wire next_Wt 64
(define-fun |sha512_n next_Wt| ((state |sha512_s|)) (_ BitVec 64) (concat ((_ extract 31 0) (|sha512#73| state)) ((_ extract 63 32) (|sha512#73| state))))
(declare-fun |sha512#83| (|sha512_s|) (_ BitVec 5)) ; \read_counter
; yosys-smt2-register read_counter 5
; yosys-smt2-wire read_counter 5
(define-fun |sha512_n read_counter| ((state |sha512_s|)) (_ BitVec 5) (|sha512#83| state))
(declare-fun |sha512#84| (|sha512_s|) (_ BitVec 7)) ; \round
; yosys-smt2-register round 7
; yosys-smt2-wire round 7
(define-fun |sha512_n round| ((state |sha512_s|)) (_ BitVec 7) (|sha512#84| state))
; yosys-smt2-output round_o 7
; yosys-smt2-wire round_o 7
(define-fun |sha512_n round_o| ((state |sha512_s|)) (_ BitVec 7) (|sha512#84| state))
(define-fun |sha512#85| ((state |sha512_s|)) (_ BitVec 7) (bvadd (|sha512#84| state) #b0000001)) ; \round_plus_1
; yosys-smt2-wire round_plus_1 7
(define-fun |sha512_n round_plus_1| ((state |sha512_s|)) (_ BitVec 7) (|sha512#85| state))
(declare-fun |sha512#86| (|sha512_s|) Bool) ; \rst_i
; yosys-smt2-input rst_i 1
; yosys-smt2-wire rst_i 1
(define-fun |sha512_n rst_i| ((state |sha512_s|)) Bool (|sha512#86| state))
(declare-fun |sha512#87| (|sha512_s|) (_ BitVec 32)) ; \text_i
; yosys-smt2-input text_i 32
; yosys-smt2-wire text_i 32
(define-fun |sha512_n text_i| ((state |sha512_s|)) (_ BitVec 32) (|sha512#87| state))
(declare-fun |sha512#88| (|sha512_s|) (_ BitVec 32)) ; \text_o
; yosys-smt2-output text_o 32
; yosys-smt2-register text_o 32
; yosys-smt2-wire text_o 32
(define-fun |sha512_n text_o| ((state |sha512_s|)) (_ BitVec 32) (|sha512#88| state))
; yosys-smt2-anyseq sha512#89 32 $auto$setundef.cc:501:execute$1261
(declare-fun |sha512#89| (|sha512_s|) (_ BitVec 32)) ; $auto$rtlil.cc:3135:Anyseq$1262
(define-fun |sha512#90| ((state |sha512_s|)) Bool (not (or  (= ((_ extract 0 0) (|sha512#83| state)) #b1) (= ((_ extract 1 1) (|sha512#83| state)) #b1) (= ((_ extract 2 2) (|sha512#83| state)) #b1) (= ((_ extract 3 3) (|sha512#83| state)) #b1) (= ((_ extract 4 4) (|sha512#83| state)) #b1)))) ; $procmux$118_CMP
(define-fun |sha512#91| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00001)) ; $procmux$119_CMP
(define-fun |sha512#92| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00010)) ; $procmux$100_CMP
(define-fun |sha512#93| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00011)) ; $procmux$101_CMP
(define-fun |sha512#94| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00100)) ; $procmux$102_CMP
(define-fun |sha512#95| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00101)) ; $procmux$103_CMP
(define-fun |sha512#96| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00110)) ; $procmux$104_CMP
(define-fun |sha512#97| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b00111)) ; $procmux$105_CMP
(define-fun |sha512#98| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01000)) ; $procmux$106_CMP
(define-fun |sha512#99| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01001)) ; $procmux$107_CMP
(define-fun |sha512#100| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01010)) ; $procmux$108_CMP
(define-fun |sha512#101| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01011)) ; $procmux$109_CMP
(define-fun |sha512#102| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01100)) ; $procmux$110_CMP
(define-fun |sha512#103| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01101)) ; $procmux$111_CMP
(define-fun |sha512#104| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01110)) ; $procmux$112_CMP
(define-fun |sha512#105| ((state |sha512_s|)) Bool (= (|sha512#83| state) #b01111)) ; $procmux$113_CMP
(define-fun |sha512#106| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#105| state) ((_ extract 63 32) (|sha512#0| state)) (ite (|sha512#104| state) ((_ extract 31 0) (|sha512#0| state)) (ite (|sha512#103| state) ((_ extract 63 32) (|sha512#1| state)) (ite (|sha512#102| state) ((_ extract 31 0) (|sha512#1| state)) (ite (|sha512#101| state) ((_ extract 63 32) (|sha512#2| state)) (ite (|sha512#100| state) ((_ extract 31 0) (|sha512#2| state)) (ite (|sha512#99| state) ((_ extract 63 32) (|sha512#3| state)) (ite (|sha512#98| state) ((_ extract 31 0) (|sha512#3| state)) (ite (|sha512#97| state) ((_ extract 63 32) (|sha512#4| state)) (ite (|sha512#96| state) ((_ extract 31 0) (|sha512#4| state)) (ite (|sha512#95| state) ((_ extract 63 32) (|sha512#5| state)) (ite (|sha512#94| state) ((_ extract 31 0) (|sha512#5| state)) (ite (|sha512#93| state) ((_ extract 63 32) (|sha512#6| state)) (ite (|sha512#92| state) ((_ extract 31 0) (|sha512#6| state)) (ite (|sha512#91| state) ((_ extract 63 32) (|sha512#7| state)) (ite (|sha512#90| state) ((_ extract 31 0) (|sha512#7| state)) #b00000000000000000000000000000000))))))))))))))))) ; $procmux$97_Y
(define-fun |sha512#107| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#101| state) ((_ extract 63 32) (|sha512#0| state)) (ite (|sha512#100| state) ((_ extract 31 0) (|sha512#0| state)) (ite (|sha512#99| state) ((_ extract 63 32) (|sha512#1| state)) (ite (|sha512#98| state) ((_ extract 31 0) (|sha512#1| state)) (ite (|sha512#97| state) ((_ extract 63 32) (|sha512#2| state)) (ite (|sha512#96| state) ((_ extract 31 0) (|sha512#2| state)) (ite (|sha512#95| state) ((_ extract 63 32) (|sha512#3| state)) (ite (|sha512#94| state) ((_ extract 31 0) (|sha512#3| state)) (ite (|sha512#93| state) ((_ extract 63 32) (|sha512#4| state)) (ite (|sha512#92| state) ((_ extract 31 0) (|sha512#4| state)) (ite (|sha512#91| state) ((_ extract 63 32) (|sha512#5| state)) (ite (|sha512#90| state) ((_ extract 31 0) (|sha512#5| state)) #b00000000000000000000000000000000))))))))))))) ; $procmux$117_Y
(define-fun |sha512#108| ((state |sha512_s|)) (_ BitVec 1) (bvnot ((_ extract 1 1) (|sha512#77| state)))) ; $procmux$130_CMP
(define-fun |sha512#109| ((state |sha512_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|sha512#108| state)) #b1) (|sha512#107| state) (ite (= ((_ extract 1 1) (|sha512#77| state)) #b1) (|sha512#106| state) (|sha512#89| state)))) ; $procmux$114_Y
(define-fun |sha512#110| ((state |sha512_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|sha512#74| state)) #b1) #b00000000000000000000000000000000 (|sha512#109| state))) ; $procmux$131_Y
(define-fun |sha512#111| ((state |sha512_s|)) (_ BitVec 32) (ite (= ((_ extract 0 0) (|sha512#76| state)) #b1) (|sha512#88| state) (|sha512#110| state))) ; $auto$rtlil.cc:2461:Mux$1764
(define-fun |sha512#112| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#111| state))) ; $auto$rtlil.cc:2461:Mux$1766
(define-fun |sha512#113| ((state |sha512_s|)) (_ BitVec 7) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#85| state) #b0000000)) ; $procmux$513_Y
(define-fun |sha512#114| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011111)) ; $procmux$147_CMP
(define-fun |sha512#115| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011101)) ; $procmux$148_CMP
(define-fun |sha512#116| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011011)) ; $procmux$149_CMP
(define-fun |sha512#117| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011001)) ; $procmux$150_CMP
(define-fun |sha512#118| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010111)) ; $procmux$151_CMP
(define-fun |sha512#119| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010101)) ; $procmux$152_CMP
(define-fun |sha512#120| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010011)) ; $procmux$153_CMP
(define-fun |sha512#121| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010001)) ; $procmux$154_CMP
(define-fun |sha512#122| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001111)) ; $procmux$155_CMP
(define-fun |sha512#123| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001101)) ; $procmux$156_CMP
(define-fun |sha512#124| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001011)) ; $procmux$157_CMP
(define-fun |sha512#125| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001001)) ; $procmux$158_CMP
(define-fun |sha512#126| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000111)) ; $procmux$159_CMP
(define-fun |sha512#127| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000101)) ; $procmux$160_CMP
(define-fun |sha512#128| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000011)) ; $procmux$161_CMP
(define-fun |sha512#129| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000001)) ; $procmux$162_CMP
(define-fun |sha512#130| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001000)) ; $procmux$1000_CMP
(define-fun |sha512#131| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000110)) ; $procmux$1001_CMP
(define-fun |sha512#132| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000100)) ; $procmux$1002_CMP
(define-fun |sha512#133| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0000010)) ; $procmux$1003_CMP
(define-fun |sha512#134| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100000)) ; $procmux$1018_CMP [0]
(define-fun |sha512#135| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100001)) ; $procmux$1018_CMP [1]
(define-fun |sha512#136| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100010)) ; $procmux$1018_CMP [2]
(define-fun |sha512#137| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100011)) ; $procmux$1018_CMP [3]
(define-fun |sha512#138| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100100)) ; $procmux$1018_CMP [4]
(define-fun |sha512#139| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100101)) ; $procmux$1018_CMP [5]
(define-fun |sha512#140| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100110)) ; $procmux$1018_CMP [6]
(define-fun |sha512#141| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0100111)) ; $procmux$1018_CMP [7]
(define-fun |sha512#142| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101000)) ; $procmux$1018_CMP [8]
(define-fun |sha512#143| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101001)) ; $procmux$1018_CMP [9]
(define-fun |sha512#144| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101010)) ; $procmux$1018_CMP [10]
(define-fun |sha512#145| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101011)) ; $procmux$1018_CMP [11]
(define-fun |sha512#146| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101100)) ; $procmux$1018_CMP [12]
(define-fun |sha512#147| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101101)) ; $procmux$1018_CMP [13]
(define-fun |sha512#148| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101110)) ; $procmux$1018_CMP [14]
(define-fun |sha512#149| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0101111)) ; $procmux$1018_CMP [15]
(define-fun |sha512#150| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110000)) ; $procmux$1018_CMP [16]
(define-fun |sha512#151| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110001)) ; $procmux$1018_CMP [17]
(define-fun |sha512#152| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110010)) ; $procmux$1018_CMP [18]
(define-fun |sha512#153| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110011)) ; $procmux$1018_CMP [19]
(define-fun |sha512#154| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110100)) ; $procmux$1018_CMP [20]
(define-fun |sha512#155| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110101)) ; $procmux$1018_CMP [21]
(define-fun |sha512#156| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110110)) ; $procmux$1018_CMP [22]
(define-fun |sha512#157| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0110111)) ; $procmux$1018_CMP [23]
(define-fun |sha512#158| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111000)) ; $procmux$1018_CMP [24]
(define-fun |sha512#159| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111001)) ; $procmux$1018_CMP [25]
(define-fun |sha512#160| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111010)) ; $procmux$1018_CMP [26]
(define-fun |sha512#161| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111011)) ; $procmux$1018_CMP [27]
(define-fun |sha512#162| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111100)) ; $procmux$1018_CMP [28]
(define-fun |sha512#163| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111101)) ; $procmux$1018_CMP [29]
(define-fun |sha512#164| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111110)) ; $procmux$1018_CMP [30]
(define-fun |sha512#165| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0111111)) ; $procmux$1018_CMP [31]
(define-fun |sha512#166| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000000)) ; $procmux$1018_CMP [32]
(define-fun |sha512#167| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000001)) ; $procmux$1018_CMP [33]
(define-fun |sha512#168| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000010)) ; $procmux$1018_CMP [34]
(define-fun |sha512#169| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000011)) ; $procmux$1018_CMP [35]
(define-fun |sha512#170| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000100)) ; $procmux$1018_CMP [36]
(define-fun |sha512#171| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000101)) ; $procmux$1018_CMP [37]
(define-fun |sha512#172| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000110)) ; $procmux$1018_CMP [38]
(define-fun |sha512#173| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1000111)) ; $procmux$1018_CMP [39]
(define-fun |sha512#174| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001000)) ; $procmux$1018_CMP [40]
(define-fun |sha512#175| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001001)) ; $procmux$1018_CMP [41]
(define-fun |sha512#176| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001010)) ; $procmux$1018_CMP [42]
(define-fun |sha512#177| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001011)) ; $procmux$1018_CMP [43]
(define-fun |sha512#178| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001100)) ; $procmux$1018_CMP [44]
(define-fun |sha512#179| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001101)) ; $procmux$1018_CMP [45]
(define-fun |sha512#180| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001110)) ; $procmux$1018_CMP [46]
(define-fun |sha512#181| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1001111)) ; $procmux$1018_CMP [47]
(define-fun |sha512#182| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010000)) ; $procmux$1018_CMP [48]
(define-fun |sha512#183| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010001)) ; $procmux$1018_CMP [49]
(define-fun |sha512#184| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010010)) ; $procmux$1018_CMP [50]
(define-fun |sha512#185| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010011)) ; $procmux$1018_CMP [51]
(define-fun |sha512#186| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010100)) ; $procmux$1018_CMP [52]
(define-fun |sha512#187| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010101)) ; $procmux$1018_CMP [53]
(define-fun |sha512#188| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010110)) ; $procmux$1018_CMP [54]
(define-fun |sha512#189| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1010111)) ; $procmux$1018_CMP [55]
(define-fun |sha512#190| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011000)) ; $procmux$1018_CMP [56]
(define-fun |sha512#191| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011001)) ; $procmux$1018_CMP [57]
(define-fun |sha512#192| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011010)) ; $procmux$1018_CMP [58]
(define-fun |sha512#193| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011011)) ; $procmux$1018_CMP [59]
(define-fun |sha512#194| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011100)) ; $procmux$1018_CMP [60]
(define-fun |sha512#195| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011101)) ; $procmux$1018_CMP [61]
(define-fun |sha512#196| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011110)) ; $procmux$1018_CMP [62]
(define-fun |sha512#197| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1011111)) ; $procmux$1018_CMP [63]
(define-fun |sha512#198| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011110)) ; $procmux$1019_CMP
(define-fun |sha512#199| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011100)) ; $procmux$1020_CMP
(define-fun |sha512#200| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011010)) ; $procmux$1021_CMP
(define-fun |sha512#201| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0011000)) ; $procmux$1022_CMP
(define-fun |sha512#202| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010110)) ; $procmux$1023_CMP
(define-fun |sha512#203| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010100)) ; $procmux$1024_CMP
(define-fun |sha512#204| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010010)) ; $procmux$1025_CMP
(define-fun |sha512#205| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0010000)) ; $procmux$1026_CMP
(define-fun |sha512#206| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001110)) ; $procmux$1027_CMP
(define-fun |sha512#207| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001100)) ; $procmux$1028_CMP
(define-fun |sha512#208| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b0001010)) ; $procmux$1029_CMP
(define-fun |sha512#209| ((state |sha512_s|)) Bool (distinct (concat (ite (|sha512#208| state) #b1 #b0) (concat (ite (|sha512#207| state) #b1 #b0) (concat (ite (|sha512#206| state) #b1 #b0) (concat (ite (|sha512#205| state) #b1 #b0) (concat (ite (|sha512#204| state) #b1 #b0) (concat (ite (|sha512#203| state) #b1 #b0) (concat (ite (|sha512#202| state) #b1 #b0) (concat (ite (|sha512#201| state) #b1 #b0) (concat (ite (|sha512#200| state) #b1 #b0) (concat (ite (|sha512#199| state) #b1 #b0) (concat (ite (|sha512#198| state) #b1 #b0) (concat (ite (|sha512#197| state) #b1 #b0) (concat (ite (|sha512#196| state) #b1 #b0) (concat (ite (|sha512#195| state) #b1 #b0) (concat (ite (|sha512#194| state) #b1 #b0) (concat (ite (|sha512#193| state) #b1 #b0) (concat (ite (|sha512#192| state) #b1 #b0) (concat (ite (|sha512#191| state) #b1 #b0) (concat (ite (|sha512#190| state) #b1 #b0) (concat (ite (|sha512#189| state) #b1 #b0) (concat (ite (|sha512#188| state) #b1 #b0) (concat (ite (|sha512#187| state) #b1 #b0) (concat (ite (|sha512#186| state) #b1 #b0) (concat (ite (|sha512#185| state) #b1 #b0) (concat (ite (|sha512#184| state) #b1 #b0) (concat (ite (|sha512#183| state) #b1 #b0) (concat (ite (|sha512#182| state) #b1 #b0) (concat (ite (|sha512#181| state) #b1 #b0) (concat (ite (|sha512#180| state) #b1 #b0) (concat (ite (|sha512#179| state) #b1 #b0) (concat (ite (|sha512#178| state) #b1 #b0) (concat (ite (|sha512#177| state) #b1 #b0) (concat (ite (|sha512#176| state) #b1 #b0) (concat (ite (|sha512#175| state) #b1 #b0) (concat (ite (|sha512#174| state) #b1 #b0) (concat (ite (|sha512#173| state) #b1 #b0) (concat (ite (|sha512#172| state) #b1 #b0) (concat (ite (|sha512#171| state) #b1 #b0) (concat (ite (|sha512#170| state) #b1 #b0) (concat (ite (|sha512#169| state) #b1 #b0) (concat (ite (|sha512#168| state) #b1 #b0) (concat (ite (|sha512#167| state) #b1 #b0) (concat (ite (|sha512#166| state) #b1 #b0) (concat (ite (|sha512#165| state) #b1 #b0) (concat (ite (|sha512#164| state) #b1 #b0) (concat (ite (|sha512#163| state) #b1 #b0) (concat (ite (|sha512#162| state) #b1 #b0) (concat (ite (|sha512#161| state) #b1 #b0) (concat (ite (|sha512#160| state) #b1 #b0) (concat (ite (|sha512#159| state) #b1 #b0) (concat (ite (|sha512#158| state) #b1 #b0) (concat (ite (|sha512#157| state) #b1 #b0) (concat (ite (|sha512#156| state) #b1 #b0) (concat (ite (|sha512#155| state) #b1 #b0) (concat (ite (|sha512#154| state) #b1 #b0) (concat (ite (|sha512#153| state) #b1 #b0) (concat (ite (|sha512#152| state) #b1 #b0) (concat (ite (|sha512#151| state) #b1 #b0) (concat (ite (|sha512#150| state) #b1 #b0) (concat (ite (|sha512#149| state) #b1 #b0) (concat (ite (|sha512#148| state) #b1 #b0) (concat (ite (|sha512#147| state) #b1 #b0) (concat (ite (|sha512#146| state) #b1 #b0) (concat (ite (|sha512#145| state) #b1 #b0) (concat (ite (|sha512#144| state) #b1 #b0) (concat (ite (|sha512#143| state) #b1 #b0) (concat (ite (|sha512#142| state) #b1 #b0) (concat (ite (|sha512#141| state) #b1 #b0) (concat (ite (|sha512#140| state) #b1 #b0) (concat (ite (|sha512#139| state) #b1 #b0) (concat (ite (|sha512#138| state) #b1 #b0) (concat (ite (|sha512#137| state) #b1 #b0) (concat (ite (|sha512#136| state) #b1 #b0) (concat (ite (|sha512#135| state) #b1 #b0) (concat (ite (|sha512#134| state) #b1 #b0) (concat (ite (|sha512#133| state) #b1 #b0) (concat (ite (|sha512#132| state) #b1 #b0) (concat (ite (|sha512#131| state) #b1 #b0) (concat (ite (|sha512#130| state) #b1 #b0) (concat (ite (|sha512#129| state) #b1 #b0) (concat (ite (|sha512#128| state) #b1 #b0) (concat (ite (|sha512#127| state) #b1 #b0) (concat (ite (|sha512#126| state) #b1 #b0) (concat (ite (|sha512#125| state) #b1 #b0) (concat (ite (|sha512#124| state) #b1 #b0) (concat (ite (|sha512#123| state) #b1 #b0) (concat (ite (|sha512#122| state) #b1 #b0) (concat (ite (|sha512#121| state) #b1 #b0) (concat (ite (|sha512#120| state) #b1 #b0) (concat (ite (|sha512#119| state) #b1 #b0) (concat (ite (|sha512#118| state) #b1 #b0) (concat (ite (|sha512#117| state) #b1 #b0) (concat (ite (|sha512#116| state) #b1 #b0) (concat (ite (|sha512#115| state) #b1 #b0) (ite (|sha512#114| state) #b1 #b0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; $auto$opt_reduce.cc:134:opt_pmux$1237
(define-fun |sha512#210| ((state |sha512_s|)) Bool (not (or  (= ((_ extract 0 0) (|sha512#84| state)) #b1) (= ((_ extract 1 1) (|sha512#84| state)) #b1) (= ((_ extract 2 2) (|sha512#84| state)) #b1) (= ((_ extract 3 3) (|sha512#84| state)) #b1) (= ((_ extract 4 4) (|sha512#84| state)) #b1) (= ((_ extract 5 5) (|sha512#84| state)) #b1) (= ((_ extract 6 6) (|sha512#84| state)) #b1)))) ; $procmux$1011_CMP
(define-fun |sha512#211| ((state |sha512_s|)) (_ BitVec 7) (ite (|sha512#210| state) (|sha512#113| state) (ite (|sha512#209| state) (|sha512#85| state) #b0000000))) ; $procmux$479_Y
(define-fun |sha512#212| ((state |sha512_s|)) (_ BitVec 7) (ite (|sha512#86| state) #b0000000 (|sha512#211| state))) ; $auto$rtlil.cc:2461:Mux$1724
(define-fun |sha512#213| ((state |sha512_s|)) (_ BitVec 5) (bvsub (|sha512#83| state) #b00001)) ; $auto$wreduce.cc:455:run$1258 [4:0]
(define-fun |sha512#214| ((state |sha512_s|)) Bool (distinct (|sha512#83| state) #b00000)) ; $procmux$83_CMP
(define-fun |sha512#215| ((state |sha512_s|)) (_ BitVec 5) (ite (|sha512#214| state) (|sha512#213| state) #b00000)) ; $procmux$82_Y
(define-fun |sha512#216| ((state |sha512_s|)) (_ BitVec 5) (ite (= ((_ extract 0 0) (|sha512#74| state)) #b1) #b00000 (|sha512#215| state))) ; $procmux$84_Y
; yosys-smt2-anyseq sha512#217 5 $auto$setundef.cc:501:execute$1277
(declare-fun |sha512#217| (|sha512_s|) (_ BitVec 5)) ; $auto$rtlil.cc:3135:Anyseq$1278
(define-fun |sha512#218| ((state |sha512_s|)) (_ BitVec 5) (ite (= ((_ extract 0 0) (|sha512#108| state)) #b1) #b01011 (ite (= ((_ extract 1 1) (|sha512#77| state)) #b1) #b01111 (|sha512#217| state)))) ; $procmux$87_Y
(define-fun |sha512#219| ((state |sha512_s|)) (_ BitVec 5) (ite (= ((_ extract 0 0) (|sha512#76| state)) #b1) (|sha512#218| state) (|sha512#216| state))) ; $procmux$90_Y
(define-fun |sha512#220| ((state |sha512_s|)) Bool (or  (|sha512#214| state) (= ((_ extract 0 0) (|sha512#74| state)) #b1) (= ((_ extract 0 0) (|sha512#76| state)) #b1))) ; $auto$opt_dff.cc:194:make_patterns_logic$1539
(define-fun |sha512#221| ((state |sha512_s|)) Bool (distinct (concat ((_ extract 0 0) (|sha512#76| state)) (|sha512#74| state)) #b01)) ; $auto$opt_dff.cc:194:make_patterns_logic$1541
(define-fun |sha512#222| ((state |sha512_s|)) Bool (and  (|sha512#220| state) (|sha512#221| state))) ; $auto$opt_dff.cc:219:make_patterns_logic$1543
(define-fun |sha512#223| ((state |sha512_s|)) (_ BitVec 5) (ite (|sha512#222| state) (|sha512#219| state) (|sha512#83| state))) ; $auto$rtlil.cc:2461:Mux$1760
(define-fun |sha512#224| ((state |sha512_s|)) (_ BitVec 5) (ite (|sha512#86| state) #b00000 (|sha512#223| state))) ; $auto$rtlil.cc:2461:Mux$1762
(define-fun |sha512#225| ((state |sha512_s|)) (_ BitVec 1) (ite (|sha512#80| state) (|sha512#78| state) (|sha512#74| state))) ; $auto$rtlil.cc:2461:Mux$1548
(define-fun |sha512#226| ((state |sha512_s|)) (_ BitVec 1) (ite (|sha512#86| state) #b0 (|sha512#225| state))) ; $auto$rtlil.cc:2461:Mux$1550
(define-fun |sha512#227| ((state |sha512_s|)) (_ BitVec 2) (ite (|sha512#80| state) ((_ extract 3 2) (|sha512#79| state)) (|sha512#77| state))) ; $auto$rtlil.cc:2461:Mux$1552
(define-fun |sha512#228| ((state |sha512_s|)) (_ BitVec 2) (ite (|sha512#86| state) #b00 (|sha512#227| state))) ; $auto$rtlil.cc:2461:Mux$1554
(define-fun |sha512#229| ((state |sha512_s|)) (_ BitVec 2) (ite (= ((_ extract 0 0) (|sha512#74| state)) #b1) #b00 #b00)) ; $procmux$1141_Y
(define-fun |sha512#230| ((state |sha512_s|)) (_ BitVec 2) (ite (|sha512#80| state) ((_ extract 1 0) (|sha512#79| state)) (|sha512#229| state))) ; $procmux$1144_Y
(define-fun |sha512#231| ((state |sha512_s|)) Bool (distinct (concat (ite (|sha512#80| state) #b1 #b0) (|sha512#74| state)) #b01)) ; $auto$opt_dff.cc:194:make_patterns_logic$1293
(define-fun |sha512#232| ((state |sha512_s|)) (_ BitVec 2) (ite (|sha512#231| state) (|sha512#230| state) (|sha512#76| state))) ; $auto$rtlil.cc:2461:Mux$1556
(define-fun |sha512#233| ((state |sha512_s|)) (_ BitVec 2) (ite (|sha512#86| state) #b00 (|sha512#232| state))) ; $auto$rtlil.cc:2461:Mux$1558
(define-fun |sha512#234| ((state |sha512_s|)) (_ BitVec 1) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) #b1 #b0)) ; $procmux$330_Y
(define-fun |sha512#235| ((state |sha512_s|)) (_ BitVec 1) (ite (|sha512#210| state) (|sha512#234| state) (ite (|sha512#209| state) #b0 #b0))) ; $procmux$296_Y
(define-fun |sha512#236| ((state |sha512_s|)) (_ BitVec 1) (bvnot (ite (|sha512#209| state) #b1 #b0))) ; $auto$opt_dff.cc:194:make_patterns_logic$1297
(define-fun |sha512#237| ((state |sha512_s|)) Bool (distinct (concat ((_ extract 1 1) (|sha512#76| state)) (ite (|sha512#210| state) #b1 #b0)) #b01)) ; $auto$opt_dff.cc:194:make_patterns_logic$1299
(define-fun |sha512#238| ((state |sha512_s|)) Bool (and  (= ((_ extract 0 0) (|sha512#236| state)) #b1) (|sha512#237| state))) ; $auto$opt_dff.cc:219:make_patterns_logic$1301
(define-fun |sha512#239| ((state |sha512_s|)) (_ BitVec 1) (ite (|sha512#238| state) (|sha512#235| state) (|sha512#74| state))) ; $auto$rtlil.cc:2461:Mux$1560
(define-fun |sha512#240| ((state |sha512_s|)) (_ BitVec 1) (ite (|sha512#86| state) #b0 (|sha512#239| state))) ; $auto$rtlil.cc:2461:Mux$1562
(define-fun |sha512#241| ((state |sha512_s|)) Bool (distinct (concat (ite (|sha512#197| state) #b1 #b0) (concat (ite (|sha512#196| state) #b1 #b0) (concat (ite (|sha512#195| state) #b1 #b0) (concat (ite (|sha512#194| state) #b1 #b0) (concat (ite (|sha512#193| state) #b1 #b0) (concat (ite (|sha512#192| state) #b1 #b0) (concat (ite (|sha512#191| state) #b1 #b0) (concat (ite (|sha512#190| state) #b1 #b0) (concat (ite (|sha512#189| state) #b1 #b0) (concat (ite (|sha512#188| state) #b1 #b0) (concat (ite (|sha512#187| state) #b1 #b0) (concat (ite (|sha512#186| state) #b1 #b0) (concat (ite (|sha512#185| state) #b1 #b0) (concat (ite (|sha512#184| state) #b1 #b0) (concat (ite (|sha512#183| state) #b1 #b0) (concat (ite (|sha512#182| state) #b1 #b0) (concat (ite (|sha512#181| state) #b1 #b0) (concat (ite (|sha512#180| state) #b1 #b0) (concat (ite (|sha512#179| state) #b1 #b0) (concat (ite (|sha512#178| state) #b1 #b0) (concat (ite (|sha512#177| state) #b1 #b0) (concat (ite (|sha512#176| state) #b1 #b0) (concat (ite (|sha512#175| state) #b1 #b0) (concat (ite (|sha512#174| state) #b1 #b0) (concat (ite (|sha512#173| state) #b1 #b0) (concat (ite (|sha512#172| state) #b1 #b0) (concat (ite (|sha512#171| state) #b1 #b0) (concat (ite (|sha512#170| state) #b1 #b0) (concat (ite (|sha512#169| state) #b1 #b0) (concat (ite (|sha512#168| state) #b1 #b0) (concat (ite (|sha512#167| state) #b1 #b0) (concat (ite (|sha512#166| state) #b1 #b0) (concat (ite (|sha512#165| state) #b1 #b0) (concat (ite (|sha512#164| state) #b1 #b0) (concat (ite (|sha512#163| state) #b1 #b0) (concat (ite (|sha512#162| state) #b1 #b0) (concat (ite (|sha512#161| state) #b1 #b0) (concat (ite (|sha512#160| state) #b1 #b0) (concat (ite (|sha512#159| state) #b1 #b0) (concat (ite (|sha512#158| state) #b1 #b0) (concat (ite (|sha512#157| state) #b1 #b0) (concat (ite (|sha512#156| state) #b1 #b0) (concat (ite (|sha512#155| state) #b1 #b0) (concat (ite (|sha512#154| state) #b1 #b0) (concat (ite (|sha512#153| state) #b1 #b0) (concat (ite (|sha512#152| state) #b1 #b0) (concat (ite (|sha512#151| state) #b1 #b0) (concat (ite (|sha512#150| state) #b1 #b0) (concat (ite (|sha512#149| state) #b1 #b0) (concat (ite (|sha512#148| state) #b1 #b0) (concat (ite (|sha512#147| state) #b1 #b0) (concat (ite (|sha512#146| state) #b1 #b0) (concat (ite (|sha512#145| state) #b1 #b0) (concat (ite (|sha512#144| state) #b1 #b0) (concat (ite (|sha512#143| state) #b1 #b0) (concat (ite (|sha512#142| state) #b1 #b0) (concat (ite (|sha512#141| state) #b1 #b0) (concat (ite (|sha512#140| state) #b1 #b0) (concat (ite (|sha512#139| state) #b1 #b0) (concat (ite (|sha512#138| state) #b1 #b0) (concat (ite (|sha512#137| state) #b1 #b0) (concat (ite (|sha512#136| state) #b1 #b0) (concat (ite (|sha512#135| state) #b1 #b0) (ite (|sha512#134| state) #b1 #b0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$1018_CTRL
(define-fun |sha512#242| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#120| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#42| state) #b00000000000000000000000000000000))) ; $procmux$200_Y
(define-fun |sha512#243| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#120| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1354
(define-fun |sha512#244| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#243| state) (|sha512#242| state) (|sha512#66| state))) ; $auto$rtlil.cc:2461:Mux$1616
(define-fun |sha512#245| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#244| state))) ; $auto$rtlil.cc:2461:Mux$1618
(define-fun |sha512#246| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#204| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#41| state) #b00000000000000000000000000000000))) ; $procmux$381_Y
(define-fun |sha512#247| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#204| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1351
(define-fun |sha512#248| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#247| state) (|sha512#246| state) (|sha512#65| state))) ; $auto$rtlil.cc:2461:Mux$1612
(define-fun |sha512#249| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#248| state))) ; $auto$rtlil.cc:2461:Mux$1614
(define-fun |sha512#250| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#121| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#66| state) #b00000000000000000000000000000000))) ; $procmux$208_Y
(define-fun |sha512#251| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#121| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1361
(define-fun |sha512#252| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#251| state) (|sha512#250| state) (|sha512#64| state))) ; $auto$rtlil.cc:2461:Mux$1624
(define-fun |sha512#253| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#252| state))) ; $auto$rtlil.cc:2461:Mux$1626
(define-fun |sha512#254| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#205| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#65| state) #b00000000000000000000000000000000))) ; $procmux$389_Y
(define-fun |sha512#255| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#205| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1358
(define-fun |sha512#256| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#255| state) (|sha512#254| state) (|sha512#63| state))) ; $auto$rtlil.cc:2461:Mux$1620
(define-fun |sha512#257| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#256| state))) ; $auto$rtlil.cc:2461:Mux$1622
(define-fun |sha512#258| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#122| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#64| state) #b00000000000000000000000000000000))) ; $procmux$216_Y
(define-fun |sha512#259| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#122| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1368
(define-fun |sha512#260| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#259| state) (|sha512#258| state) (|sha512#62| state))) ; $auto$rtlil.cc:2461:Mux$1632
(define-fun |sha512#261| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#260| state))) ; $auto$rtlil.cc:2461:Mux$1634
(define-fun |sha512#262| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#206| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#63| state) #b00000000000000000000000000000000))) ; $procmux$397_Y
(define-fun |sha512#263| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#206| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1365
(define-fun |sha512#264| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#263| state) (|sha512#262| state) (|sha512#61| state))) ; $auto$rtlil.cc:2461:Mux$1628
(define-fun |sha512#265| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#264| state))) ; $auto$rtlil.cc:2461:Mux$1630
(define-fun |sha512#266| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#123| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#62| state) #b00000000000000000000000000000000))) ; $procmux$224_Y
(define-fun |sha512#267| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#123| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1375
(define-fun |sha512#268| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#267| state) (|sha512#266| state) (|sha512#60| state))) ; $auto$rtlil.cc:2461:Mux$1640
(define-fun |sha512#269| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#268| state))) ; $auto$rtlil.cc:2461:Mux$1642
(define-fun |sha512#270| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#207| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#61| state) #b00000000000000000000000000000000))) ; $procmux$405_Y
(define-fun |sha512#271| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#207| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1372
(define-fun |sha512#272| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#271| state) (|sha512#270| state) (|sha512#59| state))) ; $auto$rtlil.cc:2461:Mux$1636
(define-fun |sha512#273| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#272| state))) ; $auto$rtlil.cc:2461:Mux$1638
(define-fun |sha512#274| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#124| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#60| state) #b00000000000000000000000000000000))) ; $procmux$232_Y
(define-fun |sha512#275| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#124| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1382
(define-fun |sha512#276| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#275| state) (|sha512#274| state) (|sha512#58| state))) ; $auto$rtlil.cc:2461:Mux$1648
(define-fun |sha512#277| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#276| state))) ; $auto$rtlil.cc:2461:Mux$1650
(define-fun |sha512#278| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#208| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#59| state) #b00000000000000000000000000000000))) ; $procmux$413_Y
(define-fun |sha512#279| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#208| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1379
(define-fun |sha512#280| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#279| state) (|sha512#278| state) (|sha512#57| state))) ; $auto$rtlil.cc:2461:Mux$1644
(define-fun |sha512#281| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#280| state))) ; $auto$rtlil.cc:2461:Mux$1646
(define-fun |sha512#282| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#125| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#58| state) #b00000000000000000000000000000000))) ; $procmux$240_Y
(define-fun |sha512#283| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#125| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1389
(define-fun |sha512#284| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#283| state) (|sha512#282| state) (|sha512#56| state))) ; $auto$rtlil.cc:2461:Mux$1656
(define-fun |sha512#285| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#284| state))) ; $auto$rtlil.cc:2461:Mux$1658
(define-fun |sha512#286| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#130| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#57| state) #b00000000000000000000000000000000))) ; $procmux$421_Y
(define-fun |sha512#287| ((state |sha512_s|)) Bool (or  (|sha512#130| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1386
(define-fun |sha512#288| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#287| state) (|sha512#286| state) (|sha512#55| state))) ; $auto$rtlil.cc:2461:Mux$1652
(define-fun |sha512#289| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#288| state))) ; $auto$rtlil.cc:2461:Mux$1654
(define-fun |sha512#290| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#126| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#56| state) #b00000000000000000000000000000000))) ; $procmux$248_Y
(define-fun |sha512#291| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#126| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1396
(define-fun |sha512#292| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#291| state) (|sha512#290| state) (|sha512#54| state))) ; $auto$rtlil.cc:2461:Mux$1664
(define-fun |sha512#293| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#292| state))) ; $auto$rtlil.cc:2461:Mux$1666
(define-fun |sha512#294| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#131| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#55| state) #b00000000000000000000000000000000))) ; $procmux$429_Y
(define-fun |sha512#295| ((state |sha512_s|)) Bool (or  (|sha512#131| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1393
(define-fun |sha512#296| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#295| state) (|sha512#294| state) (|sha512#53| state))) ; $auto$rtlil.cc:2461:Mux$1660
(define-fun |sha512#297| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#296| state))) ; $auto$rtlil.cc:2461:Mux$1662
(define-fun |sha512#298| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#127| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#54| state) #b00000000000000000000000000000000))) ; $procmux$256_Y
(define-fun |sha512#299| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#127| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1403
(define-fun |sha512#300| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#299| state) (|sha512#298| state) (|sha512#52| state))) ; $auto$rtlil.cc:2461:Mux$1672
(define-fun |sha512#301| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#300| state))) ; $auto$rtlil.cc:2461:Mux$1674
(define-fun |sha512#302| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#132| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#53| state) #b00000000000000000000000000000000))) ; $procmux$437_Y
(define-fun |sha512#303| ((state |sha512_s|)) Bool (or  (|sha512#132| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1400
(define-fun |sha512#304| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#303| state) (|sha512#302| state) (|sha512#51| state))) ; $auto$rtlil.cc:2461:Mux$1668
(define-fun |sha512#305| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#304| state))) ; $auto$rtlil.cc:2461:Mux$1670
(define-fun |sha512#306| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#115| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#26| state) #b00000000000000000000000000000000))) ; $procmux$280_Y
(define-fun |sha512#307| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#115| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1319
(define-fun |sha512#308| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#307| state) (|sha512#306| state) (|sha512#50| state))) ; $auto$rtlil.cc:2461:Mux$1576
(define-fun |sha512#309| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#308| state))) ; $auto$rtlil.cc:2461:Mux$1578
(define-fun |sha512#310| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#199| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#27| state) #b00000000000000000000000000000000))) ; $procmux$288_Y
(define-fun |sha512#311| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#199| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1316
(define-fun |sha512#312| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#311| state) (|sha512#310| state) (|sha512#49| state))) ; $auto$rtlil.cc:2461:Mux$1572
(define-fun |sha512#313| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#312| state))) ; $auto$rtlil.cc:2461:Mux$1574
(define-fun |sha512#314| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#116| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#50| state) #b00000000000000000000000000000000))) ; $procmux$168_Y
(define-fun |sha512#315| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#116| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1326
(define-fun |sha512#316| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#315| state) (|sha512#314| state) (|sha512#48| state))) ; $auto$rtlil.cc:2461:Mux$1584
(define-fun |sha512#317| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#316| state))) ; $auto$rtlil.cc:2461:Mux$1586
(define-fun |sha512#318| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#200| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#49| state) #b00000000000000000000000000000000))) ; $procmux$349_Y
(define-fun |sha512#319| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#200| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1323
(define-fun |sha512#320| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#319| state) (|sha512#318| state) (|sha512#47| state))) ; $auto$rtlil.cc:2461:Mux$1580
(define-fun |sha512#321| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#320| state))) ; $auto$rtlil.cc:2461:Mux$1582
(define-fun |sha512#322| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#117| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#48| state) #b00000000000000000000000000000000))) ; $procmux$176_Y
(define-fun |sha512#323| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#117| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1333
(define-fun |sha512#324| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#323| state) (|sha512#322| state) (|sha512#46| state))) ; $auto$rtlil.cc:2461:Mux$1592
(define-fun |sha512#325| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#324| state))) ; $auto$rtlil.cc:2461:Mux$1594
(define-fun |sha512#326| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#201| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#47| state) #b00000000000000000000000000000000))) ; $procmux$357_Y
(define-fun |sha512#327| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#201| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1330
(define-fun |sha512#328| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#327| state) (|sha512#326| state) (|sha512#45| state))) ; $auto$rtlil.cc:2461:Mux$1588
(define-fun |sha512#329| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#328| state))) ; $auto$rtlil.cc:2461:Mux$1590
(define-fun |sha512#330| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#118| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#46| state) #b00000000000000000000000000000000))) ; $procmux$184_Y
(define-fun |sha512#331| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#118| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1340
(define-fun |sha512#332| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#331| state) (|sha512#330| state) (|sha512#44| state))) ; $auto$rtlil.cc:2461:Mux$1600
(define-fun |sha512#333| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#332| state))) ; $auto$rtlil.cc:2461:Mux$1602
(define-fun |sha512#334| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#202| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#45| state) #b00000000000000000000000000000000))) ; $procmux$365_Y
(define-fun |sha512#335| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#202| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1337
(define-fun |sha512#336| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#335| state) (|sha512#334| state) (|sha512#43| state))) ; $auto$rtlil.cc:2461:Mux$1596
(define-fun |sha512#337| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#336| state))) ; $auto$rtlil.cc:2461:Mux$1598
(define-fun |sha512#338| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#119| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#44| state) #b00000000000000000000000000000000))) ; $procmux$192_Y
(define-fun |sha512#339| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#119| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1347
(define-fun |sha512#340| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#339| state) (|sha512#338| state) (|sha512#42| state))) ; $auto$rtlil.cc:2461:Mux$1608
(define-fun |sha512#341| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#340| state))) ; $auto$rtlil.cc:2461:Mux$1610
(define-fun |sha512#342| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#203| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#43| state) #b00000000000000000000000000000000))) ; $procmux$373_Y
(define-fun |sha512#343| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#203| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1344
(define-fun |sha512#344| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#343| state) (|sha512#342| state) (|sha512#41| state))) ; $auto$rtlil.cc:2461:Mux$1604
(define-fun |sha512#345| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#344| state))) ; $auto$rtlil.cc:2461:Mux$1606
(define-fun |sha512#346| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#128| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#52| state) #b00000000000000000000000000000000))) ; $procmux$264_Y
(define-fun |sha512#347| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#128| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1410
(define-fun |sha512#348| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#347| state) (|sha512#346| state) (|sha512#40| state))) ; $auto$rtlil.cc:2461:Mux$1680
(define-fun |sha512#349| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#348| state))) ; $auto$rtlil.cc:2461:Mux$1682
(define-fun |sha512#350| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#133| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#51| state) #b00000000000000000000000000000000))) ; $procmux$445_Y
(define-fun |sha512#351| ((state |sha512_s|)) Bool (or  (|sha512#133| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1407
(define-fun |sha512#352| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#351| state) (|sha512#350| state) (|sha512#39| state))) ; $auto$rtlil.cc:2461:Mux$1676
(define-fun |sha512#353| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#352| state))) ; $auto$rtlil.cc:2461:Mux$1678
(define-fun |sha512#354| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#129| state) (|sha512#87| state) (ite (|sha512#241| state) (|sha512#40| state) #b00000000000000000000000000000000))) ; $procmux$272_Y
(define-fun |sha512#355| ((state |sha512_s|)) Bool (or  (|sha512#241| state) (|sha512#129| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1421
(define-fun |sha512#356| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#355| state) (|sha512#354| state) (|sha512#38| state))) ; $auto$rtlil.cc:2461:Mux$1688
(define-fun |sha512#357| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#356| state))) ; $auto$rtlil.cc:2461:Mux$1690
(define-fun |sha512#358| ((state |sha512_s|)) (_ BitVec 32) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#87| state) #b00000000000000000000000000000000)) ; $procmux$341_Y
(define-fun |sha512#359| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#210| state) (|sha512#358| state) (ite (|sha512#241| state) (|sha512#39| state) #b00000000000000000000000000000000))) ; $procmux$338_Y
(define-fun |sha512#360| ((state |sha512_s|)) Bool (or  (|sha512#210| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1414
(define-fun |sha512#361| ((state |sha512_s|)) Bool (and  (|sha512#360| state) (|sha512#237| state))) ; $auto$opt_dff.cc:219:make_patterns_logic$1418
(define-fun |sha512#362| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#361| state) (|sha512#359| state) (|sha512#37| state))) ; $auto$rtlil.cc:2461:Mux$1684
(define-fun |sha512#363| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#362| state))) ; $auto$rtlil.cc:2461:Mux$1686
(define-fun |sha512#364| ((state |sha512_s|)) Bool (or  (|sha512#130| state) (|sha512#131| state) (|sha512#132| state) (|sha512#133| state) (|sha512#198| state) (|sha512#199| state) (|sha512#200| state) (|sha512#201| state) (|sha512#202| state) (|sha512#203| state) (|sha512#204| state) (|sha512#205| state) (|sha512#206| state) (|sha512#207| state) (|sha512#208| state))) ; $auto$opt_reduce.cc:134:opt_pmux$1225
(define-fun |sha512#365| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#210| state) (|sha512#358| state) (ite (|sha512#364| state) (|sha512#87| state) (ite (|sha512#241| state) ((_ extract 63 32) (|sha512#73| state)) #b00000000000000000000000000000000)))) ; $procmux$453_Y
(define-fun |sha512#366| ((state |sha512_s|)) Bool (or  (|sha512#364| state) (|sha512#210| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1308
(define-fun |sha512#367| ((state |sha512_s|)) Bool (and  (|sha512#366| state) (|sha512#237| state))) ; $auto$opt_dff.cc:219:make_patterns_logic$1312
(define-fun |sha512#368| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#367| state) (|sha512#365| state) (|sha512#27| state))) ; $auto$rtlil.cc:2461:Mux$1568
(define-fun |sha512#369| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#368| state))) ; $auto$rtlil.cc:2461:Mux$1570
(define-fun |sha512#370| ((state |sha512_s|)) Bool (or  (|sha512#114| state) (|sha512#115| state) (|sha512#116| state) (|sha512#117| state) (|sha512#118| state) (|sha512#119| state) (|sha512#120| state) (|sha512#121| state) (|sha512#122| state) (|sha512#123| state) (|sha512#124| state) (|sha512#125| state) (|sha512#126| state) (|sha512#127| state) (|sha512#128| state) (|sha512#129| state))) ; $auto$opt_reduce.cc:134:opt_pmux$1219
(define-fun |sha512#371| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#370| state) (|sha512#87| state) (ite (|sha512#241| state) ((_ extract 31 0) (|sha512#73| state)) #b00000000000000000000000000000000))) ; $procmux$145_Y
(define-fun |sha512#372| ((state |sha512_s|)) Bool (or  (|sha512#370| state) (|sha512#241| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1305
(define-fun |sha512#373| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#372| state) (|sha512#371| state) (|sha512#26| state))) ; $auto$rtlil.cc:2461:Mux$1564
(define-fun |sha512#374| ((state |sha512_s|)) (_ BitVec 32) (ite (|sha512#86| state) #b00000000000000000000000000000000 (|sha512#373| state))) ; $auto$rtlil.cc:2461:Mux$1566
; yosys-smt2-memory $auto$proc_rom.cc:150:do_switch$78 7 64 1 0 sync
(declare-fun |sha512#375#0| (|sha512_s|) (Array (_ BitVec 7) (_ BitVec 64))) ; $auto$proc_rom.cc:150:do_switch$78
(define-fun |sha512_m $auto$proc_rom.cc:150:do_switch$78| ((state |sha512_s|)) (Array (_ BitVec 7) (_ BitVec 64)) (|sha512#375#0| state))
(define-fun |sha512_m:R0A $auto$proc_rom.cc:150:do_switch$78| ((state |sha512_s|)) (_ BitVec 7) (|sha512#84| state)) ; \round
(define-fun |sha512#376| ((state |sha512_s|)) (_ BitVec 64) (select (|sha512#375#0| state) (|sha512_m:R0A $auto$proc_rom.cc:150:do_switch$78| state))) ; $auto$proc_rom.cc:149:do_switch$77
(define-fun |sha512_m:R0D $auto$proc_rom.cc:150:do_switch$78| ((state |sha512_s|)) (_ BitVec 64) (|sha512#376| state))
(define-fun |sha512#377| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#376| state))) ; $auto$rtlil.cc:2461:Mux$1758
; yosys-smt2-anyseq sha512#378 64 $auto$setundef.cc:501:execute$1263
(declare-fun |sha512#378| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1264
(define-fun |sha512#379| ((state |sha512_s|)) Bool (= (|sha512#77| state) #b11)) ; $procmux$555_CMP
(define-fun |sha512#380| ((state |sha512_s|)) Bool (= (|sha512#77| state) #b01)) ; $procmux$557_CMP
(define-fun |sha512#381| ((state |sha512_s|)) Bool (or  (|sha512#379| state) (|sha512#380| state))) ; $auto$opt_reduce.cc:134:opt_pmux$1223
(define-fun |sha512#382| ((state |sha512_s|)) Bool (= (|sha512#77| state) #b10)) ; $procmux$1007_CMP
(define-fun |sha512#383| ((state |sha512_s|)) Bool (not (or  (= ((_ extract 0 0) (|sha512#77| state)) #b1) (= ((_ extract 1 1) (|sha512#77| state)) #b1)))) ; $procmux$1008_CMP
(define-fun |sha512#384| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0100011110110101010010000001110110111110111110100100111110100100 (ite (|sha512#382| state) #b0101101111100000110011010001100100010011011111100010000101111001 (ite (|sha512#381| state) (|sha512#7| state) (|sha512#378| state))))) ; $procmux$554_Y
(define-fun |sha512#385| ((state |sha512_s|)) Bool (and  (|sha512#210| state) (= ((_ extract 1 1) (|sha512#76| state)) #b1))) ; $auto$opt_dff.cc:219:make_patterns_logic$1425
(define-fun |sha512#386| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#384| state) (|sha512#15| state))) ; $auto$rtlil.cc:2461:Mux$1692
(define-fun |sha512#387| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#386| state))) ; $auto$rtlil.cc:2461:Mux$1694
; yosys-smt2-anyseq sha512#388 64 $auto$setundef.cc:501:execute$1265
(declare-fun |sha512#388| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1266
(define-fun |sha512#389| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1101101100001100001011100000110101100100111110011000111110100111 (ite (|sha512#382| state) #b0001111110000011110110011010101111111011010000011011110101101011 (ite (|sha512#381| state) (|sha512#6| state) (|sha512#388| state))))) ; $procmux$601_Y
(define-fun |sha512#390| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#389| state) (|sha512#14| state))) ; $auto$rtlil.cc:2461:Mux$1696
(define-fun |sha512#391| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#390| state))) ; $auto$rtlil.cc:2461:Mux$1698
; yosys-smt2-anyseq sha512#392 64 $auto$setundef.cc:501:execute$1267
(declare-fun |sha512#392| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1268
(define-fun |sha512#393| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1000111010110100010010101000011101101000010110000001010100010001 (ite (|sha512#382| state) #b1001101100000101011010001000110000101011001111100110110000011111 (ite (|sha512#381| state) (|sha512#5| state) (|sha512#392| state))))) ; $procmux$648_Y
(define-fun |sha512#394| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#393| state) (|sha512#13| state))) ; $auto$rtlil.cc:2461:Mux$1700
(define-fun |sha512#395| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#394| state))) ; $auto$rtlil.cc:2461:Mux$1702
; yosys-smt2-anyseq sha512#396 64 $auto$setundef.cc:501:execute$1269
(declare-fun |sha512#396| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1270
(define-fun |sha512#397| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0110011100110011001001100110011111111111110000000000101100110001 (ite (|sha512#382| state) #b0101000100001110010100100111111110101101111001101000001011010001 (ite (|sha512#381| state) (|sha512#4| state) (|sha512#396| state))))) ; $procmux$695_Y
(define-fun |sha512#398| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#397| state) (|sha512#12| state))) ; $auto$rtlil.cc:2461:Mux$1704
(define-fun |sha512#399| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#398| state))) ; $auto$rtlil.cc:2461:Mux$1706
; yosys-smt2-anyseq sha512#400 64 $auto$setundef.cc:501:execute$1271
(declare-fun |sha512#400| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1272
(define-fun |sha512#401| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0001010100101111111011001101100011110111000011100101100100111001 (ite (|sha512#382| state) #b1010010101001111111101010011101001011111000111010011011011110001 (ite (|sha512#381| state) (|sha512#3| state) (|sha512#400| state))))) ; $procmux$742_Y
(define-fun |sha512#402| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#401| state) (|sha512#11| state))) ; $auto$rtlil.cc:2461:Mux$1708
(define-fun |sha512#403| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#402| state))) ; $auto$rtlil.cc:2461:Mux$1710
; yosys-smt2-anyseq sha512#404 64 $auto$setundef.cc:501:execute$1273
(declare-fun |sha512#404| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1274
(define-fun |sha512#405| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1001000101011001000000010101101000110000011100001101110100010111 (ite (|sha512#382| state) #b0011110001101110111100110111001011111110100101001111100000101011 (ite (|sha512#381| state) (|sha512#2| state) (|sha512#404| state))))) ; $procmux$789_Y
(define-fun |sha512#406| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#405| state) (|sha512#10| state))) ; $auto$rtlil.cc:2461:Mux$1712
(define-fun |sha512#407| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#406| state))) ; $auto$rtlil.cc:2461:Mux$1714
; yosys-smt2-anyseq sha512#408 64 $auto$setundef.cc:501:execute$1275
(declare-fun |sha512#408| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1276
(define-fun |sha512#409| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0110001010011010001010010010101000110110011111001101010100000111 (ite (|sha512#382| state) #b1011101101100111101011101000010110000100110010101010011100111011 (ite (|sha512#381| state) (|sha512#1| state) (|sha512#408| state))))) ; $procmux$836_Y
(define-fun |sha512#410| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#409| state) (|sha512#9| state))) ; $auto$rtlil.cc:2461:Mux$1716
(define-fun |sha512#411| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#410| state))) ; $auto$rtlil.cc:2461:Mux$1718
; yosys-smt2-anyseq sha512#412 64 $auto$setundef.cc:501:execute$1279
(declare-fun |sha512#412| (|sha512_s|) (_ BitVec 64)) ; $auto$rtlil.cc:3135:Anyseq$1280
(define-fun |sha512#413| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1100101110111011100111010101110111000001000001011001111011011000 (ite (|sha512#382| state) #b0110101000001001111001100110011111110011101111001100100100001000 (ite (|sha512#381| state) (|sha512#0| state) (|sha512#412| state))))) ; $procmux$883_Y
(define-fun |sha512#414| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#385| state) (|sha512#413| state) (|sha512#8| state))) ; $auto$rtlil.cc:2461:Mux$1720
(define-fun |sha512#415| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#414| state))) ; $auto$rtlil.cc:2461:Mux$1722
(define-fun |sha512#416| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#6| state) (|sha512#15| state))) ; $add$sha512.v:820$71_Y
(define-fun |sha512#417| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0100011110110101010010000001110110111110111110100100111110100100 (ite (|sha512#382| state) #b0101101111100000110011010001100100010011011111100010000101111001 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$916_Y
(define-fun |sha512#418| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#417| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$919_Y
(define-fun |sha512#419| ((state |sha512_s|)) Bool (= (|sha512#84| state) #b1100000)) ; $procmux$1017_CMP
(define-fun |sha512#420| ((state |sha512_s|)) Bool (distinct (concat (ite (|sha512#208| state) #b1 #b0) (concat (ite (|sha512#207| state) #b1 #b0) (concat (ite (|sha512#206| state) #b1 #b0) (concat (ite (|sha512#205| state) #b1 #b0) (concat (ite (|sha512#204| state) #b1 #b0) (concat (ite (|sha512#203| state) #b1 #b0) (concat (ite (|sha512#202| state) #b1 #b0) (concat (ite (|sha512#201| state) #b1 #b0) (concat (ite (|sha512#200| state) #b1 #b0) (concat (ite (|sha512#199| state) #b1 #b0) (concat (ite (|sha512#198| state) #b1 #b0) (concat (ite (|sha512#197| state) #b1 #b0) (concat (ite (|sha512#196| state) #b1 #b0) (concat (ite (|sha512#195| state) #b1 #b0) (concat (ite (|sha512#194| state) #b1 #b0) (concat (ite (|sha512#193| state) #b1 #b0) (concat (ite (|sha512#192| state) #b1 #b0) (concat (ite (|sha512#191| state) #b1 #b0) (concat (ite (|sha512#190| state) #b1 #b0) (concat (ite (|sha512#189| state) #b1 #b0) (concat (ite (|sha512#188| state) #b1 #b0) (concat (ite (|sha512#187| state) #b1 #b0) (concat (ite (|sha512#186| state) #b1 #b0) (concat (ite (|sha512#185| state) #b1 #b0) (concat (ite (|sha512#184| state) #b1 #b0) (concat (ite (|sha512#183| state) #b1 #b0) (concat (ite (|sha512#182| state) #b1 #b0) (concat (ite (|sha512#181| state) #b1 #b0) (concat (ite (|sha512#180| state) #b1 #b0) (concat (ite (|sha512#179| state) #b1 #b0) (concat (ite (|sha512#178| state) #b1 #b0) (concat (ite (|sha512#177| state) #b1 #b0) (concat (ite (|sha512#176| state) #b1 #b0) (concat (ite (|sha512#175| state) #b1 #b0) (concat (ite (|sha512#174| state) #b1 #b0) (concat (ite (|sha512#173| state) #b1 #b0) (concat (ite (|sha512#172| state) #b1 #b0) (concat (ite (|sha512#171| state) #b1 #b0) (concat (ite (|sha512#170| state) #b1 #b0) (concat (ite (|sha512#169| state) #b1 #b0) (concat (ite (|sha512#168| state) #b1 #b0) (concat (ite (|sha512#167| state) #b1 #b0) (concat (ite (|sha512#166| state) #b1 #b0) (concat (ite (|sha512#165| state) #b1 #b0) (concat (ite (|sha512#164| state) #b1 #b0) (concat (ite (|sha512#163| state) #b1 #b0) (concat (ite (|sha512#162| state) #b1 #b0) (concat (ite (|sha512#161| state) #b1 #b0) (concat (ite (|sha512#160| state) #b1 #b0) (concat (ite (|sha512#159| state) #b1 #b0) (concat (ite (|sha512#158| state) #b1 #b0) (concat (ite (|sha512#157| state) #b1 #b0) (concat (ite (|sha512#156| state) #b1 #b0) (concat (ite (|sha512#155| state) #b1 #b0) (concat (ite (|sha512#154| state) #b1 #b0) (concat (ite (|sha512#153| state) #b1 #b0) (concat (ite (|sha512#152| state) #b1 #b0) (concat (ite (|sha512#151| state) #b1 #b0) (concat (ite (|sha512#150| state) #b1 #b0) (concat (ite (|sha512#149| state) #b1 #b0) (concat (ite (|sha512#148| state) #b1 #b0) (concat (ite (|sha512#147| state) #b1 #b0) (concat (ite (|sha512#146| state) #b1 #b0) (concat (ite (|sha512#145| state) #b1 #b0) (concat (ite (|sha512#144| state) #b1 #b0) (concat (ite (|sha512#143| state) #b1 #b0) (concat (ite (|sha512#142| state) #b1 #b0) (concat (ite (|sha512#141| state) #b1 #b0) (concat (ite (|sha512#140| state) #b1 #b0) (concat (ite (|sha512#139| state) #b1 #b0) (concat (ite (|sha512#138| state) #b1 #b0) (concat (ite (|sha512#137| state) #b1 #b0) (concat (ite (|sha512#136| state) #b1 #b0) (concat (ite (|sha512#135| state) #b1 #b0) (concat (ite (|sha512#134| state) #b1 #b0) (concat (ite (|sha512#133| state) #b1 #b0) (concat (ite (|sha512#132| state) #b1 #b0) (concat (ite (|sha512#131| state) #b1 #b0) (ite (|sha512#130| state) #b1 #b0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) #b0000000000000000000000000000000000000000000000000000000000000000000000000000000)) ; $auto$opt_reduce.cc:134:opt_pmux$1221
(define-fun |sha512#421| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#418| state) (ite (|sha512#420| state) (|sha512#6| state) (ite (|sha512#419| state) (|sha512#416| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$896_Y
(define-fun |sha512#422| ((state |sha512_s|)) Bool (or  (|sha512#420| state) (|sha512#210| state) (|sha512#419| state))) ; $auto$opt_dff.cc:194:make_patterns_logic$1458
(define-fun |sha512#423| ((state |sha512_s|)) Bool (distinct (concat ((_ extract 1 1) (|sha512#76| state)) (concat (ite (|sha512#210| state) #b1 #b0) (concat (ite (|sha512#383| state) #b1 #b0) (ite (|sha512#382| state) #b1 #b0)))) #b1100)) ; $auto$opt_dff.cc:194:make_patterns_logic$1460
(define-fun |sha512#424| ((state |sha512_s|)) Bool (and  (|sha512#422| state) (|sha512#423| state) (|sha512#237| state))) ; $auto$opt_dff.cc:219:make_patterns_logic$1464
(define-fun |sha512#425| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#421| state) (|sha512#7| state))) ; $auto$rtlil.cc:2461:Mux$1726
(define-fun |sha512#426| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#425| state))) ; $auto$rtlil.cc:2461:Mux$1728
(define-fun |sha512#427| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#5| state) (|sha512#14| state))) ; $add$sha512.v:819$70_Y
(define-fun |sha512#428| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1101101100001100001011100000110101100100111110011000111110100111 (ite (|sha512#382| state) #b0001111110000011110110011010101111111011010000011011110101101011 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$946_Y
(define-fun |sha512#429| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#428| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$949_Y
(define-fun |sha512#430| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#429| state) (ite (|sha512#420| state) (|sha512#5| state) (ite (|sha512#419| state) (|sha512#427| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$926_Y
(define-fun |sha512#431| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#430| state) (|sha512#6| state))) ; $auto$rtlil.cc:2461:Mux$1730
(define-fun |sha512#432| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#431| state))) ; $auto$rtlil.cc:2461:Mux$1732
(define-fun |sha512#433| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#4| state) (|sha512#13| state))) ; $add$sha512.v:818$69_Y
(define-fun |sha512#434| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1000111010110100010010101000011101101000010110000001010100010001 (ite (|sha512#382| state) #b1001101100000101011010001000110000101011001111100110110000011111 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$976_Y
(define-fun |sha512#435| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#434| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$979_Y
(define-fun |sha512#436| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#435| state) (ite (|sha512#420| state) (|sha512#4| state) (ite (|sha512#419| state) (|sha512#433| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$956_Y
(define-fun |sha512#437| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#436| state) (|sha512#5| state))) ; $auto$rtlil.cc:2461:Mux$1734
(define-fun |sha512#438| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#437| state))) ; $auto$rtlil.cc:2461:Mux$1736
(define-fun |sha512#439| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#82| state) (|sha512#12| state))) ; $add$sha512.v:817$68_Y
(define-fun |sha512#440| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0110011100110011001001100110011111111111110000000000101100110001 (ite (|sha512#382| state) #b0101000100001110010100100111111110101101111001101000001011010001 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$1006_Y
(define-fun |sha512#441| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#440| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$1009_Y
(define-fun |sha512#442| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#441| state) (ite (|sha512#420| state) (|sha512#82| state) (ite (|sha512#419| state) (|sha512#439| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$986_Y
(define-fun |sha512#443| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#442| state) (|sha512#4| state))) ; $auto$rtlil.cc:2461:Mux$1738
(define-fun |sha512#444| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#443| state))) ; $auto$rtlil.cc:2461:Mux$1740
(define-fun |sha512#445| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#2| state) (|sha512#11| state))) ; $add$sha512.v:816$67_Y
(define-fun |sha512#446| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0001010100101111111011001101100011110111000011100101100100111001 (ite (|sha512#382| state) #b1010010101001111111101010011101001011111000111010011011011110001 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$1036_Y
(define-fun |sha512#447| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#446| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$1039_Y
(define-fun |sha512#448| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#447| state) (ite (|sha512#420| state) (|sha512#2| state) (ite (|sha512#419| state) (|sha512#445| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$1016_Y
(define-fun |sha512#449| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#448| state) (|sha512#3| state))) ; $auto$rtlil.cc:2461:Mux$1742
(define-fun |sha512#450| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#449| state))) ; $auto$rtlil.cc:2461:Mux$1744
(define-fun |sha512#451| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#1| state) (|sha512#10| state))) ; $add$sha512.v:815$66_Y
(define-fun |sha512#452| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1001000101011001000000010101101000110000011100001101110100010111 (ite (|sha512#382| state) #b0011110001101110111100110111001011111110100101001111100000101011 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$1066_Y
(define-fun |sha512#453| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#452| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$1069_Y
(define-fun |sha512#454| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#453| state) (ite (|sha512#420| state) (|sha512#1| state) (ite (|sha512#419| state) (|sha512#451| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$1046_Y
(define-fun |sha512#455| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#454| state) (|sha512#2| state))) ; $auto$rtlil.cc:2461:Mux$1746
(define-fun |sha512#456| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#455| state))) ; $auto$rtlil.cc:2461:Mux$1748
(define-fun |sha512#457| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#0| state) (|sha512#9| state))) ; $add$sha512.v:814$65_Y
(define-fun |sha512#458| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b0110001010011010001010010010101000110110011111001101010100000111 (ite (|sha512#382| state) #b1011101101100111101011101000010110000100110010101010011100111011 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$1096_Y
(define-fun |sha512#459| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#458| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$1099_Y
(define-fun |sha512#460| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#459| state) (ite (|sha512#420| state) (|sha512#0| state) (ite (|sha512#419| state) (|sha512#457| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$1076_Y
(define-fun |sha512#461| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#460| state) (|sha512#1| state))) ; $auto$rtlil.cc:2461:Mux$1750
(define-fun |sha512#462| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#461| state))) ; $auto$rtlil.cc:2461:Mux$1752
(define-fun |sha512#463| ((state |sha512_s|)) (_ BitVec 64) (bvadd (|sha512#81| state) (|sha512#8| state))) ; $add$sha512.v:813$64_Y
(define-fun |sha512#464| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#383| state) #b1100101110111011100111010101110111000001000001011001111011011000 (ite (|sha512#382| state) #b0110101000001001111001100110011111110011101111001100100100001000 #b0000000000000000000000000000000000000000000000000000000000000000))) ; $procmux$1126_Y
(define-fun |sha512#465| ((state |sha512_s|)) (_ BitVec 64) (ite (= ((_ extract 1 1) (|sha512#76| state)) #b1) (|sha512#464| state) #b0000000000000000000000000000000000000000000000000000000000000000)) ; $procmux$1129_Y
(define-fun |sha512#466| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#210| state) (|sha512#465| state) (ite (|sha512#420| state) (|sha512#81| state) (ite (|sha512#419| state) (|sha512#463| state) #b0000000000000000000000000000000000000000000000000000000000000000)))) ; $procmux$1106_Y
(define-fun |sha512#467| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#424| state) (|sha512#466| state) (|sha512#0| state))) ; $auto$rtlil.cc:2461:Mux$1754
(define-fun |sha512#468| ((state |sha512_s|)) (_ BitVec 64) (ite (|sha512#86| state) #b0000000000000000000000000000000000000000000000000000000000000000 (|sha512#467| state))) ; $auto$rtlil.cc:2461:Mux$1756
(define-fun |sha512_a| ((state |sha512_s|)) Bool true)
(define-fun |sha512_u| ((state |sha512_s|)) Bool true)
(define-fun |sha512_i| ((state |sha512_s|)) Bool (and
  (= (bvand (select (|sha512#375#0| state) #b0000000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100001010001010001011111001100011010111001010001010111000100010) ; $auto$proc_rom.cc:150:do_switch$78[0]
  (= (bvand (select (|sha512#375#0| state) #b0000001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100001010001010001011111001100011010111001010001010111000100010) ; $auto$proc_rom.cc:150:do_switch$78[1]
  (= (bvand (select (|sha512#375#0| state) #b0000010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111000100110111010001001001000100100011111011110110010111001101) ; $auto$proc_rom.cc:150:do_switch$78[2]
  (= (bvand (select (|sha512#375#0| state) #b0000011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111000100110111010001001001000100100011111011110110010111001101) ; $auto$proc_rom.cc:150:do_switch$78[3]
  (= (bvand (select (|sha512#375#0| state) #b0000100) #b1111111111111111111111111111111111111111111111111111111111111111) #b1011010111000000111110111100111111101100010011010011101100101111) ; $auto$proc_rom.cc:150:do_switch$78[4]
  (= (bvand (select (|sha512#375#0| state) #b0000101) #b1111111111111111111111111111111111111111111111111111111111111111) #b1011010111000000111110111100111111101100010011010011101100101111) ; $auto$proc_rom.cc:150:do_switch$78[5]
  (= (bvand (select (|sha512#375#0| state) #b0000110) #b1111111111111111111111111111111111111111111111111111111111111111) #b1110100110110101110110111010010110000001100010011101101110111100) ; $auto$proc_rom.cc:150:do_switch$78[6]
  (= (bvand (select (|sha512#375#0| state) #b0000111) #b1111111111111111111111111111111111111111111111111111111111111111) #b1110100110110101110110111010010110000001100010011101101110111100) ; $auto$proc_rom.cc:150:do_switch$78[7]
  (= (bvand (select (|sha512#375#0| state) #b0001000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0011100101010110110000100101101111110011010010001011010100111000) ; $auto$proc_rom.cc:150:do_switch$78[8]
  (= (bvand (select (|sha512#375#0| state) #b0001001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0011100101010110110000100101101111110011010010001011010100111000) ; $auto$proc_rom.cc:150:do_switch$78[9]
  (= (bvand (select (|sha512#375#0| state) #b0001010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101100111110001000100011111000110110110000001011101000000011001) ; $auto$proc_rom.cc:150:do_switch$78[10]
  (= (bvand (select (|sha512#375#0| state) #b0001011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101100111110001000100011111000110110110000001011101000000011001) ; $auto$proc_rom.cc:150:do_switch$78[11]
  (= (bvand (select (|sha512#375#0| state) #b0001100) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001001000111111100000101010010010101111000110010100111110011011) ; $auto$proc_rom.cc:150:do_switch$78[12]
  (= (bvand (select (|sha512#375#0| state) #b0001101) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001001000111111100000101010010010101111000110010100111110011011) ; $auto$proc_rom.cc:150:do_switch$78[13]
  (= (bvand (select (|sha512#375#0| state) #b0001110) #b1111111111111111111111111111111111111111111111111111111111111111) #b1010101100011100010111101101010111011010011011011000000100011000) ; $auto$proc_rom.cc:150:do_switch$78[14]
  (= (bvand (select (|sha512#375#0| state) #b0001111) #b1111111111111111111111111111111111111111111111111111111111111111) #b1010101100011100010111101101010111011010011011011000000100011000) ; $auto$proc_rom.cc:150:do_switch$78[15]
  (= (bvand (select (|sha512#375#0| state) #b0010000) #b1111111111111111111111111111111111111111111111111111111111111111) #b1101100000000111101010101001100010100011000000110000001001000010) ; $auto$proc_rom.cc:150:do_switch$78[16]
  (= (bvand (select (|sha512#375#0| state) #b0010001) #b1111111111111111111111111111111111111111111111111111111111111111) #b1101100000000111101010101001100010100011000000110000001001000010) ; $auto$proc_rom.cc:150:do_switch$78[17]
  (= (bvand (select (|sha512#375#0| state) #b0010010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001001010000011010110110000000101000101011100000110111110111110) ; $auto$proc_rom.cc:150:do_switch$78[18]
  (= (bvand (select (|sha512#375#0| state) #b0010011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001001010000011010110110000000101000101011100000110111110111110) ; $auto$proc_rom.cc:150:do_switch$78[19]
  (= (bvand (select (|sha512#375#0| state) #b0010100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010010000110001100001011011111001001110111001001011001010001100) ; $auto$proc_rom.cc:150:do_switch$78[20]
  (= (bvand (select (|sha512#375#0| state) #b0010101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010010000110001100001011011111001001110111001001011001010001100) ; $auto$proc_rom.cc:150:do_switch$78[21]
  (= (bvand (select (|sha512#375#0| state) #b0010110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101010100001100011111011100001111010101111111111011010011100010) ; $auto$proc_rom.cc:150:do_switch$78[22]
  (= (bvand (select (|sha512#375#0| state) #b0010111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101010100001100011111011100001111010101111111111011010011100010) ; $auto$proc_rom.cc:150:do_switch$78[23]
  (= (bvand (select (|sha512#375#0| state) #b0011000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111001010111110010111010111010011110010011110111000100101101111) ; $auto$proc_rom.cc:150:do_switch$78[24]
  (= (bvand (select (|sha512#375#0| state) #b0011001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111001010111110010111010111010011110010011110111000100101101111) ; $auto$proc_rom.cc:150:do_switch$78[25]
  (= (bvand (select (|sha512#375#0| state) #b0011010) #b1111111111111111111111111111111111111111111111111111111111111111) #b1000000011011110101100011111111000111011000101101001011010110001) ; $auto$proc_rom.cc:150:do_switch$78[26]
  (= (bvand (select (|sha512#375#0| state) #b0011011) #b1111111111111111111111111111111111111111111111111111111111111111) #b1000000011011110101100011111111000111011000101101001011010110001) ; $auto$proc_rom.cc:150:do_switch$78[27]
  (= (bvand (select (|sha512#375#0| state) #b0011100) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001101111011100000001101010011100100101110001110001001000110101) ; $auto$proc_rom.cc:150:do_switch$78[28]
  (= (bvand (select (|sha512#375#0| state) #b0011101) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001101111011100000001101010011100100101110001110001001000110101) ; $auto$proc_rom.cc:150:do_switch$78[29]
  (= (bvand (select (|sha512#375#0| state) #b0011110) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100000110011011111100010111010011001111011010010010011010010100) ; $auto$proc_rom.cc:150:do_switch$78[30]
  (= (bvand (select (|sha512#375#0| state) #b0011111) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100000110011011111100010111010011001111011010010010011010010100) ; $auto$proc_rom.cc:150:do_switch$78[31]
  (= (bvand (select (|sha512#375#0| state) #b0100000) #b1111111111111111111111111111111111111111111111111111111111111111) #b1110010010011011011010011100000110011110111100010100101011010010) ; $auto$proc_rom.cc:150:do_switch$78[32]
  (= (bvand (select (|sha512#375#0| state) #b0100001) #b1111111111111111111111111111111111111111111111111111111111111111) #b1110111110111110010001111000011000111000010011110010010111100011) ; $auto$proc_rom.cc:150:do_switch$78[33]
  (= (bvand (select (|sha512#375#0| state) #b0100010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000111111000001100111011100011010001011100011001101010110110101) ; $auto$proc_rom.cc:150:do_switch$78[34]
  (= (bvand (select (|sha512#375#0| state) #b0100011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010010000001100101000011100110001110111101011001001110001100101) ; $auto$proc_rom.cc:150:do_switch$78[35]
  (= (bvand (select (|sha512#375#0| state) #b0100100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010110111101001001011000110111101011001001010110000001001110101) ; $auto$proc_rom.cc:150:do_switch$78[36]
  (= (bvand (select (|sha512#375#0| state) #b0100101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100101001110100100001001010101001101110101001101110010010000011) ; $auto$proc_rom.cc:150:do_switch$78[37]
  (= (bvand (select (|sha512#375#0| state) #b0100110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101110010110000101010011101110010111101010000011111101111010100) ; $auto$proc_rom.cc:150:do_switch$78[38]
  (= (bvand (select (|sha512#375#0| state) #b0100111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111011011111001100010001101101010000011000100010101001110110101) ; $auto$proc_rom.cc:150:do_switch$78[39]
  (= (bvand (select (|sha512#375#0| state) #b0101000) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001100000111110010100010101001011101110011001101101111110101011) ; $auto$proc_rom.cc:150:do_switch$78[40]
  (= (bvand (select (|sha512#375#0| state) #b0101001) #b1111111111111111111111111111111111111111111111111111111111111111) #b1010100000110001110001100110110100101101101101000011001000010000) ; $auto$proc_rom.cc:150:do_switch$78[41]
  (= (bvand (select (|sha512#375#0| state) #b0101010) #b1111111111111111111111111111111111111111111111111111111111111111) #b1011000000000011001001111100100010011000111110110010000100111111) ; $auto$proc_rom.cc:150:do_switch$78[42]
  (= (bvand (select (|sha512#375#0| state) #b0101011) #b1111111111111111111111111111111111111111111111111111111111111111) #b1011111101011001011111111100011110111110111011110000111011100100) ; $auto$proc_rom.cc:150:do_switch$78[43]
  (= (bvand (select (|sha512#375#0| state) #b0101100) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100011011100000000010111111001100111101101010001000111111000010) ; $auto$proc_rom.cc:150:do_switch$78[44]
  (= (bvand (select (|sha512#375#0| state) #b0101101) #b1111111111111111111111111111111111111111111111111111111111111111) #b1101010110100111100100010100011110010011000010101010011100100101) ; $auto$proc_rom.cc:150:do_switch$78[45]
  (= (bvand (select (|sha512#375#0| state) #b0101110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000011011001010011000110101000111100000000000111000001001101111) ; $auto$proc_rom.cc:150:do_switch$78[46]
  (= (bvand (select (|sha512#375#0| state) #b0101111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001010000101001001010010110011100001010000011100110111001110000) ; $auto$proc_rom.cc:150:do_switch$78[47]
  (= (bvand (select (|sha512#375#0| state) #b0110000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010011110110111000010101000010101000110110100100010111111111100) ; $auto$proc_rom.cc:150:do_switch$78[48]
  (= (bvand (select (|sha512#375#0| state) #b0110001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010111000011011001000010011100001011100001001101100100100100110) ; $auto$proc_rom.cc:150:do_switch$78[49]
  (= (bvand (select (|sha512#375#0| state) #b0110010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100110100101100011011011111110001011010110001000010101011101101) ; $auto$proc_rom.cc:150:do_switch$78[50]
  (= (bvand (select (|sha512#375#0| state) #b0110011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101001100111000000011010001001110011101100101011011001111011111) ; $auto$proc_rom.cc:150:do_switch$78[51]
  (= (bvand (select (|sha512#375#0| state) #b0110100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0110010100001010011100110101010010001011101011110110001111011110) ; $auto$proc_rom.cc:150:do_switch$78[52]
  (= (bvand (select (|sha512#375#0| state) #b0110101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111011001101010000010101011101100111100011101111011001010101000) ; $auto$proc_rom.cc:150:do_switch$78[53]
  (= (bvand (select (|sha512#375#0| state) #b0110110) #b1111111111111111111111111111111111111111111111111111111111111111) #b1000000111000010110010010010111001000111111011011010111011100110) ; $auto$proc_rom.cc:150:do_switch$78[54]
  (= (bvand (select (|sha512#375#0| state) #b0110111) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001001001110010001011001000010100010100100000100011010100111011) ; $auto$proc_rom.cc:150:do_switch$78[55]
  (= (bvand (select (|sha512#375#0| state) #b0111000) #b1111111111111111111111111111111111111111111111111111111111111111) #b1010001010111111111010001010000101001100111100010000001101100100) ; $auto$proc_rom.cc:150:do_switch$78[56]
  (= (bvand (select (|sha512#375#0| state) #b0111001) #b1111111111111111111111111111111111111111111111111111111111111111) #b1010100000011010011001100100101110111100010000100011000000000001) ; $auto$proc_rom.cc:150:do_switch$78[57]
  (= (bvand (select (|sha512#375#0| state) #b0111010) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100001001001011100010110111000011010000111110001001011110010001) ; $auto$proc_rom.cc:150:do_switch$78[58]
  (= (bvand (select (|sha512#375#0| state) #b0111011) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100011101101100010100011010001100000110010101001011111000110000) ; $auto$proc_rom.cc:150:do_switch$78[59]
  (= (bvand (select (|sha512#375#0| state) #b0111100) #b1111111111111111111111111111111111111111111111111111111111111111) #b1101000110010010111010000001100111010110111011110101001000011000) ; $auto$proc_rom.cc:150:do_switch$78[60]
  (= (bvand (select (|sha512#375#0| state) #b0111101) #b1111111111111111111111111111111111111111111111111111111111111111) #b1101011010011001000001100010010001010101011001011010100100010000) ; $auto$proc_rom.cc:150:do_switch$78[61]
  (= (bvand (select (|sha512#375#0| state) #b0111110) #b1111111111111111111111111111111111111111111111111111111111111111) #b1111010000001110001101011000010101010111011100010010000000101010) ; $auto$proc_rom.cc:150:do_switch$78[62]
  (= (bvand (select (|sha512#375#0| state) #b0111111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001000001101010101000000111000000110010101110111101000110111000) ; $auto$proc_rom.cc:150:do_switch$78[63]
  (= (bvand (select (|sha512#375#0| state) #b1000000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001100110100100110000010001011010111000110100101101000011001000) ; $auto$proc_rom.cc:150:do_switch$78[64]
  (= (bvand (select (|sha512#375#0| state) #b1000001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001111000110111011011000000100001010001010000011010101101010011) ; $auto$proc_rom.cc:150:do_switch$78[65]
  (= (bvand (select (|sha512#375#0| state) #b1000010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010011101001000011101110100110011011111100011101110101110011001) ; $auto$proc_rom.cc:150:do_switch$78[66]
  (= (bvand (select (|sha512#375#0| state) #b1000011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0011010010110000101111001011010111100001100110110100100010101000) ; $auto$proc_rom.cc:150:do_switch$78[67]
  (= (bvand (select (|sha512#375#0| state) #b1000100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0011100100011100000011001011001111000101110010010101101001100011) ; $auto$proc_rom.cc:150:do_switch$78[68]
  (= (bvand (select (|sha512#375#0| state) #b1000101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100111011011000101010100100101011100011010000011000101011001011) ; $auto$proc_rom.cc:150:do_switch$78[69]
  (= (bvand (select (|sha512#375#0| state) #b1000110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101101110011100110010100100111101110111011000111110001101110011) ; $auto$proc_rom.cc:150:do_switch$78[70]
  (= (bvand (select (|sha512#375#0| state) #b1000111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0110100000101110011011111111001111010110101100101011100010100011) ; $auto$proc_rom.cc:150:do_switch$78[71]
  (= (bvand (select (|sha512#375#0| state) #b1001000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111010010001111100000101110111001011101111011111011001011111100) ; $auto$proc_rom.cc:150:do_switch$78[72]
  (= (bvand (select (|sha512#375#0| state) #b1001001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0111100010100101011000110110111101000011000101110010111101100000) ; $auto$proc_rom.cc:150:do_switch$78[73]
  (= (bvand (select (|sha512#375#0| state) #b1001010) #b1111111111111111111111111111111111111111111111111111111111111111) #b1000010011001000011110000001010010100001111100001010101101110010) ; $auto$proc_rom.cc:150:do_switch$78[74]
  (= (bvand (select (|sha512#375#0| state) #b1001011) #b1111111111111111111111111111111111111111111111111111111111111111) #b1000110011000111000000100000100000011010011001000011100111101100) ; $auto$proc_rom.cc:150:do_switch$78[75]
  (= (bvand (select (|sha512#375#0| state) #b1001100) #b1111111111111111111111111111111111111111111111111111111111111111) #b1001000010111110111111111111101000100011011000110001111000101000) ; $auto$proc_rom.cc:150:do_switch$78[76]
  (= (bvand (select (|sha512#375#0| state) #b1001101) #b1111111111111111111111111111111111111111111111111111111111111111) #b1010010001010000011011001110101111011110100000101011110111101001) ; $auto$proc_rom.cc:150:do_switch$78[77]
  (= (bvand (select (|sha512#375#0| state) #b1001110) #b1111111111111111111111111111111111111111111111111111111111111111) #b1011111011111001101000111111011110110010110001100111100100010101) ; $auto$proc_rom.cc:150:do_switch$78[78]
  (= (bvand (select (|sha512#375#0| state) #b1001111) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100011001110001011110001111001011100011011100100101001100101011) ; $auto$proc_rom.cc:150:do_switch$78[79]
  (= (bvand (select (|sha512#375#0| state) #b1010000) #b1111111111111111111111111111111111111111111111111111111111111111) #b1100101000100111001111101100111011101010001001100110000110011100) ; $auto$proc_rom.cc:150:do_switch$78[80]
  (= (bvand (select (|sha512#375#0| state) #b1010001) #b1111111111111111111111111111111111111111111111111111111111111111) #b1101000110000110101110001100011100100001110000001100001000000111) ; $auto$proc_rom.cc:150:do_switch$78[81]
  (= (bvand (select (|sha512#375#0| state) #b1010010) #b1111111111111111111111111111111111111111111111111111111111111111) #b1110101011011010011111011101011011001101111000001110101100011110) ; $auto$proc_rom.cc:150:do_switch$78[82]
  (= (bvand (select (|sha512#375#0| state) #b1010011) #b1111111111111111111111111111111111111111111111111111111111111111) #b1111010101111101010011110111111111101110011011101101000101111000) ; $auto$proc_rom.cc:150:do_switch$78[83]
  (= (bvand (select (|sha512#375#0| state) #b1010100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000011011110000011001111010101001110010000101110110111110111010) ; $auto$proc_rom.cc:150:do_switch$78[84]
  (= (bvand (select (|sha512#375#0| state) #b1010101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000101001100011011111011100010110100010110010001001100010100110) ; $auto$proc_rom.cc:150:do_switch$78[85]
  (= (bvand (select (|sha512#375#0| state) #b1010110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001000100111111100110000000010010111110111110010000110110101110) ; $auto$proc_rom.cc:150:do_switch$78[86]
  (= (bvand (select (|sha512#375#0| state) #b1010111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0001101101110001000010110011010100010011000111000100011100011011) ; $auto$proc_rom.cc:150:do_switch$78[87]
  (= (bvand (select (|sha512#375#0| state) #b1011000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0010100011011011011101111111010100100011000001000111110110000100) ; $auto$proc_rom.cc:150:do_switch$78[88]
  (= (bvand (select (|sha512#375#0| state) #b1011001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0011001011001010101010110111101101000000110001110010010010010011) ; $auto$proc_rom.cc:150:do_switch$78[89]
  (= (bvand (select (|sha512#375#0| state) #b1011010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0011110010011110101111100000101000010101110010011011111010111100) ; $auto$proc_rom.cc:150:do_switch$78[90]
  (= (bvand (select (|sha512#375#0| state) #b1011011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100001100011101011001111100010010011100000100000000110101001100) ; $auto$proc_rom.cc:150:do_switch$78[91]
  (= (bvand (select (|sha512#375#0| state) #b1011100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0100110011000101110101001011111011001011001111100100001010110110) ; $auto$proc_rom.cc:150:do_switch$78[92]
  (= (bvand (select (|sha512#375#0| state) #b1011101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101100101111111001010011001110011111100011001010111111000101010) ; $auto$proc_rom.cc:150:do_switch$78[93]
  (= (bvand (select (|sha512#375#0| state) #b1011110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0101111111001011011011111010101100111010110101101111101011101100) ; $auto$proc_rom.cc:150:do_switch$78[94]
  (= (bvand (select (|sha512#375#0| state) #b1011111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0110110001000100000110011000110001001010010001110101100000010111) ; $auto$proc_rom.cc:150:do_switch$78[95]
  (= (bvand (select (|sha512#375#0| state) #b1100000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[96]
  (= (bvand (select (|sha512#375#0| state) #b1100001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[97]
  (= (bvand (select (|sha512#375#0| state) #b1100010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[98]
  (= (bvand (select (|sha512#375#0| state) #b1100011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[99]
  (= (bvand (select (|sha512#375#0| state) #b1100100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[100]
  (= (bvand (select (|sha512#375#0| state) #b1100101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[101]
  (= (bvand (select (|sha512#375#0| state) #b1100110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[102]
  (= (bvand (select (|sha512#375#0| state) #b1100111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[103]
  (= (bvand (select (|sha512#375#0| state) #b1101000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[104]
  (= (bvand (select (|sha512#375#0| state) #b1101001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[105]
  (= (bvand (select (|sha512#375#0| state) #b1101010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[106]
  (= (bvand (select (|sha512#375#0| state) #b1101011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[107]
  (= (bvand (select (|sha512#375#0| state) #b1101100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[108]
  (= (bvand (select (|sha512#375#0| state) #b1101101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[109]
  (= (bvand (select (|sha512#375#0| state) #b1101110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[110]
  (= (bvand (select (|sha512#375#0| state) #b1101111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[111]
  (= (bvand (select (|sha512#375#0| state) #b1110000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[112]
  (= (bvand (select (|sha512#375#0| state) #b1110001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[113]
  (= (bvand (select (|sha512#375#0| state) #b1110010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[114]
  (= (bvand (select (|sha512#375#0| state) #b1110011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[115]
  (= (bvand (select (|sha512#375#0| state) #b1110100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[116]
  (= (bvand (select (|sha512#375#0| state) #b1110101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[117]
  (= (bvand (select (|sha512#375#0| state) #b1110110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[118]
  (= (bvand (select (|sha512#375#0| state) #b1110111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[119]
  (= (bvand (select (|sha512#375#0| state) #b1111000) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[120]
  (= (bvand (select (|sha512#375#0| state) #b1111001) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[121]
  (= (bvand (select (|sha512#375#0| state) #b1111010) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[122]
  (= (bvand (select (|sha512#375#0| state) #b1111011) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[123]
  (= (bvand (select (|sha512#375#0| state) #b1111100) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[124]
  (= (bvand (select (|sha512#375#0| state) #b1111101) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[125]
  (= (bvand (select (|sha512#375#0| state) #b1111110) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[126]
  (= (bvand (select (|sha512#375#0| state) #b1111111) #b1111111111111111111111111111111111111111111111111111111111111111) #b0000000000000000000000000000000000000000000000000000000000000000) ; $auto$proc_rom.cc:150:do_switch$78[127]
))
(define-fun |sha512_h| ((state |sha512_s|)) Bool true)
(define-fun |sha512_t| ((state |sha512_s|) (next_state |sha512_s|)) Bool (and
  (= (|sha512#112| state) (|sha512#88| next_state)) ; $auto$ff.cc:262:slice$1546 \text_o
  (= (|sha512#212| state) (|sha512#84| next_state)) ; $auto$ff.cc:262:slice$1455 \round
  (= (|sha512#224| state) (|sha512#83| next_state)) ; $auto$ff.cc:262:slice$1538 \read_counter
  (= (|sha512#226| state) (|sha512#78| next_state)) ; $auto$ff.cc:262:slice$1290 \cmd [4]
  (= (|sha512#228| state) (|sha512#77| next_state)) ; $auto$ff.cc:262:slice$1291 \cmd [3:2]
  (= (|sha512#233| state) (|sha512#76| next_state)) ; $auto$ff.cc:262:slice$1292 \cmd [1:0]
  (= (|sha512#240| state) (|sha512#74| next_state)) ; $auto$ff.cc:262:slice$1296 \busy
  (= (|sha512#245| state) (|sha512#66| next_state)) ; $auto$ff.cc:262:slice$1353 \W9 [63:32]
  (= (|sha512#249| state) (|sha512#65| next_state)) ; $auto$ff.cc:262:slice$1350 \W9 [31:0]
  (= (|sha512#253| state) (|sha512#64| next_state)) ; $auto$ff.cc:262:slice$1360 \W8 [63:32]
  (= (|sha512#257| state) (|sha512#63| next_state)) ; $auto$ff.cc:262:slice$1357 \W8 [31:0]
  (= (|sha512#261| state) (|sha512#62| next_state)) ; $auto$ff.cc:262:slice$1367 \W7 [63:32]
  (= (|sha512#265| state) (|sha512#61| next_state)) ; $auto$ff.cc:262:slice$1364 \W7 [31:0]
  (= (|sha512#269| state) (|sha512#60| next_state)) ; $auto$ff.cc:262:slice$1374 \W6 [63:32]
  (= (|sha512#273| state) (|sha512#59| next_state)) ; $auto$ff.cc:262:slice$1371 \W6 [31:0]
  (= (|sha512#277| state) (|sha512#58| next_state)) ; $auto$ff.cc:262:slice$1381 \W5 [63:32]
  (= (|sha512#281| state) (|sha512#57| next_state)) ; $auto$ff.cc:262:slice$1378 \W5 [31:0]
  (= (|sha512#285| state) (|sha512#56| next_state)) ; $auto$ff.cc:262:slice$1388 \W4 [63:32]
  (= (|sha512#289| state) (|sha512#55| next_state)) ; $auto$ff.cc:262:slice$1385 \W4 [31:0]
  (= (|sha512#293| state) (|sha512#54| next_state)) ; $auto$ff.cc:262:slice$1395 \W3 [63:32]
  (= (|sha512#297| state) (|sha512#53| next_state)) ; $auto$ff.cc:262:slice$1392 \W3 [31:0]
  (= (|sha512#301| state) (|sha512#52| next_state)) ; $auto$ff.cc:262:slice$1402 \W2 [63:32]
  (= (|sha512#305| state) (|sha512#51| next_state)) ; $auto$ff.cc:262:slice$1399 \W2 [31:0]
  (= (|sha512#309| state) (|sha512#50| next_state)) ; $auto$ff.cc:262:slice$1318 \W14 [63:32]
  (= (|sha512#313| state) (|sha512#49| next_state)) ; $auto$ff.cc:262:slice$1315 \W14 [31:0]
  (= (|sha512#317| state) (|sha512#48| next_state)) ; $auto$ff.cc:262:slice$1325 \W13 [63:32]
  (= (|sha512#321| state) (|sha512#47| next_state)) ; $auto$ff.cc:262:slice$1322 \W13 [31:0]
  (= (|sha512#325| state) (|sha512#46| next_state)) ; $auto$ff.cc:262:slice$1332 \W12 [63:32]
  (= (|sha512#329| state) (|sha512#45| next_state)) ; $auto$ff.cc:262:slice$1329 \W12 [31:0]
  (= (|sha512#333| state) (|sha512#44| next_state)) ; $auto$ff.cc:262:slice$1339 \W11 [63:32]
  (= (|sha512#337| state) (|sha512#43| next_state)) ; $auto$ff.cc:262:slice$1336 \W11 [31:0]
  (= (|sha512#341| state) (|sha512#42| next_state)) ; $auto$ff.cc:262:slice$1346 \W10 [63:32]
  (= (|sha512#345| state) (|sha512#41| next_state)) ; $auto$ff.cc:262:slice$1343 \W10 [31:0]
  (= (|sha512#349| state) (|sha512#40| next_state)) ; $auto$ff.cc:262:slice$1409 \W1 [63:32]
  (= (|sha512#353| state) (|sha512#39| next_state)) ; $auto$ff.cc:262:slice$1406 \W1 [31:0]
  (= (|sha512#357| state) (|sha512#38| next_state)) ; $auto$ff.cc:262:slice$1420 \W0 [63:32]
  (= (|sha512#363| state) (|sha512#37| next_state)) ; $auto$ff.cc:262:slice$1413 \W0 [31:0]
  (= (|sha512#369| state) (|sha512#27| next_state)) ; $auto$ff.cc:262:slice$1307 \Wt [31:0]
  (= (|sha512#374| state) (|sha512#26| next_state)) ; $auto$ff.cc:262:slice$1304 \Wt [63:32]
  (= (|sha512#377| state) (|sha512#16| next_state)) ; $auto$ff.cc:262:slice$1536 \Kt
  (= (|sha512#387| state) (|sha512#15| next_state)) ; $auto$ff.cc:262:slice$1424 \H7
  (= (|sha512#391| state) (|sha512#14| next_state)) ; $auto$ff.cc:262:slice$1428 \H6
  (= (|sha512#395| state) (|sha512#13| next_state)) ; $auto$ff.cc:262:slice$1432 \H5
  (= (|sha512#399| state) (|sha512#12| next_state)) ; $auto$ff.cc:262:slice$1436 \H4
  (= (|sha512#403| state) (|sha512#11| next_state)) ; $auto$ff.cc:262:slice$1440 \H3
  (= (|sha512#407| state) (|sha512#10| next_state)) ; $auto$ff.cc:262:slice$1444 \H2
  (= (|sha512#411| state) (|sha512#9| next_state)) ; $auto$ff.cc:262:slice$1448 \H1
  (= (|sha512#415| state) (|sha512#8| next_state)) ; $auto$ff.cc:262:slice$1452 \H0
  (= (|sha512#426| state) (|sha512#7| next_state)) ; $auto$ff.cc:262:slice$1457 \H
  (= (|sha512#432| state) (|sha512#6| next_state)) ; $auto$ff.cc:262:slice$1467 \G
  (= (|sha512#438| state) (|sha512#5| next_state)) ; $auto$ff.cc:262:slice$1477 \F
  (= (|sha512#444| state) (|sha512#4| next_state)) ; $auto$ff.cc:262:slice$1487 \E
  (= (|sha512#450| state) (|sha512#3| next_state)) ; $auto$ff.cc:262:slice$1497 \D
  (= (|sha512#456| state) (|sha512#2| next_state)) ; $auto$ff.cc:262:slice$1507 \C
  (= (|sha512#462| state) (|sha512#1| next_state)) ; $auto$ff.cc:262:slice$1517 \B
  (= (|sha512#468| state) (|sha512#0| next_state)) ; $auto$ff.cc:262:slice$1527 \A
  (= (|sha512#375#0| state) (|sha512#375#0| next_state)) ; $auto$proc_rom.cc:150:do_switch$78
)) ; end of module sha512
; yosys-smt2-module sha512_miter
(declare-sort |sha512_miter_s| 0)
(declare-fun |sha512_miter_is| (|sha512_miter_s|) Bool)
(declare-fun |sha512_miter#0| (|sha512_miter_s|) (_ BitVec 1)) ; $formal$sha512_miter.sv:17$2_CHECK
; yosys-smt2-register $formal$sha512_miter.sv:17$2_CHECK 1
(define-fun |sha512_miter_n $formal$sha512_miter.sv:17$2_CHECK| ((state |sha512_miter_s|)) Bool (= ((_ extract 0 0) (|sha512_miter#0| state)) #b1))
(declare-fun |sha512_miter#1| (|sha512_miter_s|) (_ BitVec 1)) ; $formal$sha512_miter.sv:17$2_EN
; yosys-smt2-register $formal$sha512_miter.sv:17$2_EN 1
(define-fun |sha512_miter_n $formal$sha512_miter.sv:17$2_EN| ((state |sha512_miter_s|)) Bool (= ((_ extract 0 0) (|sha512_miter#1| state)) #b1))
(declare-fun |sha512_miter#2| (|sha512_miter_s|) (_ BitVec 1)) ; $formal$sha512_miter.sv:18$3_CHECK
; yosys-smt2-register $formal$sha512_miter.sv:18$3_CHECK 1
(define-fun |sha512_miter_n $formal$sha512_miter.sv:18$3_CHECK| ((state |sha512_miter_s|)) Bool (= ((_ extract 0 0) (|sha512_miter#2| state)) #b1))
(declare-fun |sha512_miter#3| (|sha512_miter_s|) (_ BitVec 1)) ; $formal$sha512_miter.sv:19$4_CHECK
; yosys-smt2-register $formal$sha512_miter.sv:19$4_CHECK 1
(define-fun |sha512_miter_n $formal$sha512_miter.sv:19$4_CHECK| ((state |sha512_miter_s|)) Bool (= ((_ extract 0 0) (|sha512_miter#3| state)) #b1))
; yosys-smt2-cell sha512 SHA512_1
(declare-fun |sha512_miter#4| (|sha512_miter_s|) Bool) ; \busy_o1
(declare-fun |sha512_miter#5| (|sha512_miter_s|) (_ BitVec 5)) ; \cmd_o1
(declare-fun |sha512_miter#6| (|sha512_miter_s|) (_ BitVec 7)) ; \round_o1
(declare-fun |sha512_miter#7| (|sha512_miter_s|) (_ BitVec 32)) ; \text_o1
(declare-fun |sha512_miter_h SHA512_1| (|sha512_miter_s|) |sha512_s|)
; yosys-smt2-output busy_o1 1
; yosys-smt2-wire busy_o1 1
(define-fun |sha512_miter_n busy_o1| ((state |sha512_miter_s|)) Bool (|sha512_miter#4| state))
; yosys-smt2-cell sha512 SHA512_2
(declare-fun |sha512_miter#8| (|sha512_miter_s|) Bool) ; \busy_o2
(declare-fun |sha512_miter#9| (|sha512_miter_s|) (_ BitVec 5)) ; \cmd_o2
(declare-fun |sha512_miter#10| (|sha512_miter_s|) (_ BitVec 7)) ; \round_o2
(declare-fun |sha512_miter#11| (|sha512_miter_s|) (_ BitVec 32)) ; \text_o2
(declare-fun |sha512_miter_h SHA512_2| (|sha512_miter_s|) |sha512_s|)
; yosys-smt2-output busy_o2 1
; yosys-smt2-wire busy_o2 1
(define-fun |sha512_miter_n busy_o2| ((state |sha512_miter_s|)) Bool (|sha512_miter#8| state))
(declare-fun |sha512_miter#12| (|sha512_miter_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
(define-fun |sha512_miter_n clk| ((state |sha512_miter_s|)) Bool (|sha512_miter#12| state))
(declare-fun |sha512_miter#13| (|sha512_miter_s|) (_ BitVec 4)) ; \cmd_i
; yosys-smt2-input cmd_i 4
; yosys-smt2-wire cmd_i 4
(define-fun |sha512_miter_n cmd_i| ((state |sha512_miter_s|)) (_ BitVec 4) (|sha512_miter#13| state))
; yosys-smt2-output cmd_o1 5
; yosys-smt2-wire cmd_o1 5
(define-fun |sha512_miter_n cmd_o1| ((state |sha512_miter_s|)) (_ BitVec 5) (|sha512_miter#5| state))
; yosys-smt2-output cmd_o2 5
; yosys-smt2-wire cmd_o2 5
(define-fun |sha512_miter_n cmd_o2| ((state |sha512_miter_s|)) (_ BitVec 5) (|sha512_miter#9| state))
(declare-fun |sha512_miter#14| (|sha512_miter_s|) Bool) ; \cmd_w_i
; yosys-smt2-input cmd_w_i 1
; yosys-smt2-wire cmd_w_i 1
(define-fun |sha512_miter_n cmd_w_i| ((state |sha512_miter_s|)) Bool (|sha512_miter#14| state))
(declare-fun |sha512_miter#15| (|sha512_miter_s|) (_ BitVec 1)) ; \init
; yosys-smt2-register init 1
; yosys-smt2-wire init 1
(define-fun |sha512_miter_n init| ((state |sha512_miter_s|)) Bool (= ((_ extract 0 0) (|sha512_miter#15| state)) #b1))
; yosys-smt2-output round_o1 7
; yosys-smt2-wire round_o1 7
(define-fun |sha512_miter_n round_o1| ((state |sha512_miter_s|)) (_ BitVec 7) (|sha512_miter#6| state))
; yosys-smt2-output round_o2 7
; yosys-smt2-wire round_o2 7
(define-fun |sha512_miter_n round_o2| ((state |sha512_miter_s|)) (_ BitVec 7) (|sha512_miter#10| state))
(declare-fun |sha512_miter#16| (|sha512_miter_s|) Bool) ; \rst
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(define-fun |sha512_miter_n rst| ((state |sha512_miter_s|)) Bool (|sha512_miter#16| state))
(declare-fun |sha512_miter#17| (|sha512_miter_s|) (_ BitVec 32)) ; \text_i1
; yosys-smt2-input text_i1 32
; yosys-smt2-wire text_i1 32
(define-fun |sha512_miter_n text_i1| ((state |sha512_miter_s|)) (_ BitVec 32) (|sha512_miter#17| state))
(declare-fun |sha512_miter#18| (|sha512_miter_s|) (_ BitVec 32)) ; \text_i2
; yosys-smt2-input text_i2 32
; yosys-smt2-wire text_i2 32
(define-fun |sha512_miter_n text_i2| ((state |sha512_miter_s|)) (_ BitVec 32) (|sha512_miter#18| state))
; yosys-smt2-output text_o1 32
; yosys-smt2-wire text_o1 32
(define-fun |sha512_miter_n text_o1| ((state |sha512_miter_s|)) (_ BitVec 32) (|sha512_miter#7| state))
; yosys-smt2-output text_o2 32
; yosys-smt2-wire text_o2 32
(define-fun |sha512_miter_n text_o2| ((state |sha512_miter_s|)) (_ BitVec 32) (|sha512_miter#11| state))
; yosys-smt2-assert 0 $assert$sha512_miter.sv:17$21 sha512_miter.sv:17.14-17.40
(define-fun |sha512_miter_a 0| ((state |sha512_miter_s|)) Bool (or (= ((_ extract 0 0) (|sha512_miter#0| state)) #b1) (not (= ((_ extract 0 0) (|sha512_miter#1| state)) #b1)))) ; $assert$sha512_miter.sv:17$21
; yosys-smt2-assert 1 $assert$sha512_miter.sv:18$22 sha512_miter.sv:18.14-18.42
(define-fun |sha512_miter_a 1| ((state |sha512_miter_s|)) Bool (or (= ((_ extract 0 0) (|sha512_miter#2| state)) #b1) (not (= ((_ extract 0 0) (|sha512_miter#1| state)) #b1)))) ; $assert$sha512_miter.sv:18$22
; yosys-smt2-assert 2 $assert$sha512_miter.sv:19$23 sha512_miter.sv:19.14-19.44
(define-fun |sha512_miter_a 2| ((state |sha512_miter_s|)) Bool (or (= ((_ extract 0 0) (|sha512_miter#3| state)) #b1) (not (= ((_ extract 0 0) (|sha512_miter#1| state)) #b1)))) ; $assert$sha512_miter.sv:19$23
; yosys-smt2-anyseq sha512_miter#19 1 $auto$setundef.cc:501:execute$1281
(declare-fun |sha512_miter#19| (|sha512_miter_s|) (_ BitVec 1)) ; $auto$rtlil.cc:3135:Anyseq$1282
(define-fun |sha512_miter#20| ((state |sha512_miter_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|sha512_miter#15| state)) #b1) (ite (|sha512_miter#16| state) #b1 #b0) (|sha512_miter#19| state))) ; $0$formal$sha512_miter.sv:16$1_CHECK[0:0]$6
(define-fun |sha512_miter#21| ((state |sha512_miter_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|sha512_miter#15| state)) #b1) #b1 #b0)) ; $0$formal$sha512_miter.sv:16$1_EN[0:0]$7
; yosys-smt2-assume 0 $assume$sha512_miter.sv:16$20 sha512_miter.sv:16.14-16.27
(define-fun |sha512_miter_u 0| ((state |sha512_miter_s|)) Bool (or (= ((_ extract 0 0) (|sha512_miter#20| state)) #b1) (not (= ((_ extract 0 0) (|sha512_miter#21| state)) #b1)))) ; $assume$sha512_miter.sv:16$20
(define-fun |sha512_miter#22| ((state |sha512_miter_s|)) Bool (= (|sha512_miter#6| state) (|sha512_miter#10| state))) ; $eq$sha512_miter.sv:19$19_Y
; yosys-smt2-anyseq sha512_miter#23 1 $auto$setundef.cc:501:execute$1287
(declare-fun |sha512_miter#23| (|sha512_miter_s|) (_ BitVec 1)) ; $auto$rtlil.cc:3135:Anyseq$1288
(define-fun |sha512_miter#24| ((state |sha512_miter_s|)) (_ BitVec 1) (ite (|sha512_miter#16| state) (|sha512_miter#23| state) (ite (|sha512_miter#22| state) #b1 #b0))) ; $0$formal$sha512_miter.sv:19$4_CHECK[0:0]$12
(define-fun |sha512_miter#25| ((state |sha512_miter_s|)) Bool (= (ite (|sha512_miter#4| state) #b1 #b0) (ite (|sha512_miter#8| state) #b1 #b0))) ; $eq$sha512_miter.sv:18$17_Y
; yosys-smt2-anyseq sha512_miter#26 1 $auto$setundef.cc:501:execute$1285
(declare-fun |sha512_miter#26| (|sha512_miter_s|) (_ BitVec 1)) ; $auto$rtlil.cc:3135:Anyseq$1286
(define-fun |sha512_miter#27| ((state |sha512_miter_s|)) (_ BitVec 1) (ite (|sha512_miter#16| state) (|sha512_miter#26| state) (ite (|sha512_miter#25| state) #b1 #b0))) ; $0$formal$sha512_miter.sv:18$3_CHECK[0:0]$10
(define-fun |sha512_miter#28| ((state |sha512_miter_s|)) (_ BitVec 1) (ite (|sha512_miter#16| state) #b0 #b1)) ; $0$formal$sha512_miter.sv:17$2_EN[0:0]$9
(define-fun |sha512_miter#29| ((state |sha512_miter_s|)) Bool (= (|sha512_miter#5| state) (|sha512_miter#9| state))) ; $eq$sha512_miter.sv:17$15_Y
; yosys-smt2-anyseq sha512_miter#30 1 $auto$setundef.cc:501:execute$1283
(declare-fun |sha512_miter#30| (|sha512_miter_s|) (_ BitVec 1)) ; $auto$rtlil.cc:3135:Anyseq$1284
(define-fun |sha512_miter#31| ((state |sha512_miter_s|)) (_ BitVec 1) (ite (|sha512_miter#16| state) (|sha512_miter#30| state) (ite (|sha512_miter#29| state) #b1 #b0))) ; $0$formal$sha512_miter.sv:17$2_CHECK[0:0]$8
(define-fun |sha512_miter_a| ((state |sha512_miter_s|)) Bool (and
  (|sha512_miter_a 0| state)
  (|sha512_miter_a 1| state)
  (|sha512_miter_a 2| state)
  (|sha512_a| (|sha512_miter_h SHA512_1| state))
  (|sha512_a| (|sha512_miter_h SHA512_2| state))
))
(define-fun |sha512_miter_u| ((state |sha512_miter_s|)) Bool (and
  (|sha512_miter_u 0| state)
  (|sha512_u| (|sha512_miter_h SHA512_1| state))
  (|sha512_u| (|sha512_miter_h SHA512_2| state))
))
(define-fun |sha512_miter_i| ((state |sha512_miter_s|)) Bool (and
  (= (= ((_ extract 0 0) (|sha512_miter#1| state)) #b1) false) ; $formal$sha512_miter.sv:17$2_EN
  (= (= ((_ extract 0 0) (|sha512_miter#15| state)) #b1) true) ; init
  (|sha512_i| (|sha512_miter_h SHA512_1| state))
  (|sha512_i| (|sha512_miter_h SHA512_2| state))
))
(define-fun |sha512_miter_h| ((state |sha512_miter_s|)) Bool (and
  (= (|sha512_miter_is| state) (|sha512_is| (|sha512_miter_h SHA512_1| state)))
  (= (|sha512_miter#4| state) (|sha512_n busy_o| (|sha512_miter_h SHA512_1| state))) ; sha512.busy_o
  (= (|sha512_miter#12| state) (|sha512_n clk_i| (|sha512_miter_h SHA512_1| state))) ; sha512.clk_i
  (= (|sha512_miter#13| state) (|sha512_n cmd_i| (|sha512_miter_h SHA512_1| state))) ; sha512.cmd_i
  (= (|sha512_miter#5| state) (|sha512_n cmd_o| (|sha512_miter_h SHA512_1| state))) ; sha512.cmd_o
  (= (|sha512_miter#14| state) (|sha512_n cmd_w_i| (|sha512_miter_h SHA512_1| state))) ; sha512.cmd_w_i
  (= (|sha512_miter#6| state) (|sha512_n round_o| (|sha512_miter_h SHA512_1| state))) ; sha512.round_o
  (= (|sha512_miter#16| state) (|sha512_n rst_i| (|sha512_miter_h SHA512_1| state))) ; sha512.rst_i
  (= (|sha512_miter#17| state) (|sha512_n text_i| (|sha512_miter_h SHA512_1| state))) ; sha512.text_i
  (= (|sha512_miter#7| state) (|sha512_n text_o| (|sha512_miter_h SHA512_1| state))) ; sha512.text_o
  (= (|sha512_miter_is| state) (|sha512_is| (|sha512_miter_h SHA512_2| state)))
  (= (|sha512_miter#8| state) (|sha512_n busy_o| (|sha512_miter_h SHA512_2| state))) ; sha512.busy_o
  (= (|sha512_miter#12| state) (|sha512_n clk_i| (|sha512_miter_h SHA512_2| state))) ; sha512.clk_i
  (= (|sha512_miter#13| state) (|sha512_n cmd_i| (|sha512_miter_h SHA512_2| state))) ; sha512.cmd_i
  (= (|sha512_miter#9| state) (|sha512_n cmd_o| (|sha512_miter_h SHA512_2| state))) ; sha512.cmd_o
  (= (|sha512_miter#14| state) (|sha512_n cmd_w_i| (|sha512_miter_h SHA512_2| state))) ; sha512.cmd_w_i
  (= (|sha512_miter#10| state) (|sha512_n round_o| (|sha512_miter_h SHA512_2| state))) ; sha512.round_o
  (= (|sha512_miter#16| state) (|sha512_n rst_i| (|sha512_miter_h SHA512_2| state))) ; sha512.rst_i
  (= (|sha512_miter#18| state) (|sha512_n text_i| (|sha512_miter_h SHA512_2| state))) ; sha512.text_i
  (= (|sha512_miter#11| state) (|sha512_n text_o| (|sha512_miter_h SHA512_2| state))) ; sha512.text_o
  (|sha512_h| (|sha512_miter_h SHA512_1| state))
  (|sha512_h| (|sha512_miter_h SHA512_2| state))
))
(define-fun |sha512_miter_t| ((state |sha512_miter_s|) (next_state |sha512_miter_s|)) Bool (and
  (= #b0 (|sha512_miter#15| next_state)) ; $procdff$1209 \init
  (= (|sha512_miter#24| state) (|sha512_miter#3| next_state)) ; $procdff$1216 $formal$sha512_miter.sv:19$4_CHECK
  (= (|sha512_miter#27| state) (|sha512_miter#2| next_state)) ; $procdff$1214 $formal$sha512_miter.sv:18$3_CHECK
  (= (|sha512_miter#28| state) (|sha512_miter#1| next_state)) ; $procdff$1213 $formal$sha512_miter.sv:17$2_EN
  (= (|sha512_miter#31| state) (|sha512_miter#0| next_state)) ; $procdff$1212 $formal$sha512_miter.sv:17$2_CHECK
  (|sha512_t| (|sha512_miter_h SHA512_1| state) (|sha512_miter_h SHA512_1| next_state))
  (|sha512_t| (|sha512_miter_h SHA512_2| state) (|sha512_miter_h SHA512_2| next_state))
)) ; end of module sha512_miter
; yosys-smt2-topmod sha512_miter
; end of yosys output
